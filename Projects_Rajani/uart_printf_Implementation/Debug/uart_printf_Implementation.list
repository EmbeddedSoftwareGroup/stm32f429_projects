
uart_printf_Implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000070  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000e0  200000e0  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e04a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e04  00000000  00000000  0002e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000758  00000000  00000000  0002fef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000680  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003ab4  00000000  00000000  00030cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002844  00000000  00000000  0003477c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002334  00000000  00000000  0003703c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003410 	.word	0x08003410

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003410 	.word	0x08003410

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f925 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f001 fe18 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f93d 	bl	8000882 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f905 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	20000098 	.word	0x20000098

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000098 	.word	0x20000098

08000684 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f2:	4909      	ldr	r1, [pc, #36]	; (8000718 <NVIC_EnableIRQ+0x30>)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	095b      	lsrs	r3, r3, #5
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	f002 021f 	and.w	r2, r2, #31
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100

0800071c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	da0b      	bge.n	8000748 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	490d      	ldr	r1, [pc, #52]	; (8000768 <NVIC_SetPriority+0x4c>)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 030f 	and.w	r3, r3, #15
 8000738:	3b04      	subs	r3, #4
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000746:	e009      	b.n	800075c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <NVIC_SetPriority+0x50>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	e000e100 	.word	0xe000e100

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	2201      	movs	r2, #1
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	401a      	ands	r2, r3
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b6:	2101      	movs	r1, #1
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	1e59      	subs	r1, r3, #1
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff90 	bl	800071c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff2f 	bl	8000684 <NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff44 	bl	80006cc <NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff90 	bl	8000770 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5f 	bl	800071c <NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff37 	bl	80006e8 <NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffa2 	bl	80007d4 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d106      	bne.n	80008b8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008b6:	e005      	b.n	80008c4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f023 0304 	bic.w	r3, r3, #4
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008d8:	f000 f802 	bl	80008e0 <HAL_SYSTICK_Callback>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d004      	beq.n	800090c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e00c      	b.n	8000926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2205      	movs	r2, #5
 8000910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	f022 0201 	bic.w	r2, r2, #1
 8000922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	e177      	b.n	8000c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000950:	2201      	movs	r2, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	429a      	cmp	r2, r3
 800096a:	f040 8166 	bne.w	8000c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d003      	beq.n	800097e <HAL_GPIO_Init+0x4a>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b12      	cmp	r3, #18
 800097c:	d123      	bne.n	80009c6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	691a      	ldr	r2, [r3, #16]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	69b9      	ldr	r1, [r7, #24]
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0203 	and.w	r2, r3, #3
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d00b      	beq.n	8000a1a <HAL_GPIO_Init+0xe6>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d007      	beq.n	8000a1a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0e:	2b11      	cmp	r3, #17
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b12      	cmp	r3, #18
 8000a18:	d130      	bne.n	8000a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a50:	2201      	movs	r2, #1
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	091b      	lsrs	r3, r3, #4
 8000a66:	f003 0201 	and.w	r2, r3, #1
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 80c0 	beq.w	8000c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4a65      	ldr	r2, [pc, #404]	; (8000c54 <HAL_GPIO_Init+0x320>)
 8000ac0:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <HAL_GPIO_Init+0x320>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b62      	ldr	r3, [pc, #392]	; (8000c54 <HAL_GPIO_Init+0x320>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ad6:	4a60      	ldr	r2, [pc, #384]	; (8000c58 <HAL_GPIO_Init+0x324>)
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3302      	adds	r3, #2
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	220f      	movs	r2, #15
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <HAL_GPIO_Init+0x328>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d037      	beq.n	8000b72 <HAL_GPIO_Init+0x23e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a56      	ldr	r2, [pc, #344]	; (8000c60 <HAL_GPIO_Init+0x32c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d031      	beq.n	8000b6e <HAL_GPIO_Init+0x23a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a55      	ldr	r2, [pc, #340]	; (8000c64 <HAL_GPIO_Init+0x330>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d02b      	beq.n	8000b6a <HAL_GPIO_Init+0x236>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a54      	ldr	r2, [pc, #336]	; (8000c68 <HAL_GPIO_Init+0x334>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d025      	beq.n	8000b66 <HAL_GPIO_Init+0x232>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a53      	ldr	r2, [pc, #332]	; (8000c6c <HAL_GPIO_Init+0x338>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d01f      	beq.n	8000b62 <HAL_GPIO_Init+0x22e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a52      	ldr	r2, [pc, #328]	; (8000c70 <HAL_GPIO_Init+0x33c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d019      	beq.n	8000b5e <HAL_GPIO_Init+0x22a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <HAL_GPIO_Init+0x340>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0x226>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a50      	ldr	r2, [pc, #320]	; (8000c78 <HAL_GPIO_Init+0x344>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d00d      	beq.n	8000b56 <HAL_GPIO_Init+0x222>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4f      	ldr	r2, [pc, #316]	; (8000c7c <HAL_GPIO_Init+0x348>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d007      	beq.n	8000b52 <HAL_GPIO_Init+0x21e>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <HAL_GPIO_Init+0x34c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_GPIO_Init+0x21a>
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	e012      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b4e:	230a      	movs	r3, #10
 8000b50:	e010      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b52:	2308      	movs	r3, #8
 8000b54:	e00e      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b56:	2307      	movs	r3, #7
 8000b58:	e00c      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	e00a      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b5e:	2305      	movs	r3, #5
 8000b60:	e008      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b62:	2304      	movs	r3, #4
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b66:	2303      	movs	r3, #3
 8000b68:	e004      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <HAL_GPIO_Init+0x240>
 8000b72:	2300      	movs	r3, #0
 8000b74:	69fa      	ldr	r2, [r7, #28]
 8000b76:	f002 0203 	and.w	r2, r2, #3
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b84:	4934      	ldr	r1, [pc, #208]	; (8000c58 <HAL_GPIO_Init+0x324>)
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bb6:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bbc:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000be0:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <HAL_GPIO_Init+0x350>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	f67f ae84 	bls.w	8000950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3724      	adds	r7, #36	; 0x24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40021400 	.word	0x40021400
 8000c74:	40021800 	.word	0x40021800
 8000c78:	40021c00 	.word	0x40021c00
 8000c7c:	40022000 	.word	0x40022000
 8000c80:	40022400 	.word	0x40022400
 8000c84:	40013c00 	.word	0x40013c00

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	619a      	str	r2, [r3, #24]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	405a      	eors	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	615a      	str	r2, [r3, #20]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e22d      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d075      	beq.n	8000dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cfe:	4ba3      	ldr	r3, [pc, #652]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d00c      	beq.n	8000d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0a:	4ba0      	ldr	r3, [pc, #640]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d112      	bne.n	8000d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d16:	4b9d      	ldr	r3, [pc, #628]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d22:	d10b      	bne.n	8000d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	4b99      	ldr	r3, [pc, #612]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d05b      	beq.n	8000de8 <HAL_RCC_OscConfig+0x108>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d157      	bne.n	8000de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e208      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d44:	d106      	bne.n	8000d54 <HAL_RCC_OscConfig+0x74>
 8000d46:	4a91      	ldr	r2, [pc, #580]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	4b90      	ldr	r3, [pc, #576]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e01d      	b.n	8000d90 <HAL_RCC_OscConfig+0xb0>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x98>
 8000d5e:	4a8b      	ldr	r2, [pc, #556]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	4b8a      	ldr	r3, [pc, #552]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4a88      	ldr	r2, [pc, #544]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d6c:	4b87      	ldr	r3, [pc, #540]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e00b      	b.n	8000d90 <HAL_RCC_OscConfig+0xb0>
 8000d78:	4a84      	ldr	r2, [pc, #528]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d7a:	4b84      	ldr	r3, [pc, #528]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4a81      	ldr	r2, [pc, #516]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d86:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d013      	beq.n	8000dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc68 	bl	800066c <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fc64 	bl	800066c <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e1cd      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	4b76      	ldr	r3, [pc, #472]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0xc0>
 8000dbe:	e014      	b.n	8000dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc54 	bl	800066c <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fc50 	bl	800066c <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e1b9      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	4b6c      	ldr	r3, [pc, #432]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0xe8>
 8000de6:	e000      	b.n	8000dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d063      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000df6:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00b      	beq.n	8000e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e02:	4b62      	ldr	r3, [pc, #392]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d11c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e0e:	4b5f      	ldr	r3, [pc, #380]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d116      	bne.n	8000e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1a:	4b5c      	ldr	r3, [pc, #368]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d005      	beq.n	8000e32 <HAL_RCC_OscConfig+0x152>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d001      	beq.n	8000e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e18d      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e32:	4956      	ldr	r1, [pc, #344]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e34:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e46:	e03a      	b.n	8000ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d020      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <HAL_RCC_OscConfig+0x2b0>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e56:	f7ff fc09 	bl	800066c <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc05 	bl	800066c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e16e      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7c:	4943      	ldr	r1, [pc, #268]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]
 8000e90:	e015      	b.n	8000ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <HAL_RCC_OscConfig+0x2b0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e98:	f7ff fbe8 	bl	800066c <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fbe4 	bl	800066c <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e14d      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d030      	beq.n	8000f2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d016      	beq.n	8000f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <HAL_RCC_OscConfig+0x2b4>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fbc8 	bl	800066c <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fbc4 	bl	800066c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e12d      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x200>
 8000efe:	e015      	b.n	8000f2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_RCC_OscConfig+0x2b4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fbb1 	bl	800066c <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fbad 	bl	800066c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e116      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80a0 	beq.w	800107a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_RCC_OscConfig+0x2b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d121      	bne.n	8000fba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_RCC_OscConfig+0x2b8>)
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_RCC_OscConfig+0x2b8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb73 	bl	800066c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	e011      	b.n	8000fae <HAL_RCC_OscConfig+0x2ce>
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	42470000 	.word	0x42470000
 8000f94:	42470e80 	.word	0x42470e80
 8000f98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9c:	f7ff fb66 	bl	800066c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e0cf      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	4b6a      	ldr	r3, [pc, #424]	; (8001158 <HAL_RCC_OscConfig+0x478>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
 8000fc2:	4a66      	ldr	r2, [pc, #408]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000fc4:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8000fce:	e01c      	b.n	800100a <HAL_RCC_OscConfig+0x32a>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d10c      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4a60      	ldr	r2, [pc, #384]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000fda:	4b60      	ldr	r3, [pc, #384]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8000fe4:	4a5d      	ldr	r2, [pc, #372]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff0:	e00b      	b.n	800100a <HAL_RCC_OscConfig+0x32a>
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8000ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ffe:	4a57      	ldr	r2, [pc, #348]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8001000:	4b56      	ldr	r3, [pc, #344]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8001002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001004:	f023 0304 	bic.w	r3, r3, #4
 8001008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d015      	beq.n	800103e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001012:	f7ff fb2b 	bl	800066c <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff fb27 	bl	800066c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f241 3288 	movw	r2, #5000	; 0x1388
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e08e      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001030:	4b4a      	ldr	r3, [pc, #296]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8001032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0ee      	beq.n	800101a <HAL_RCC_OscConfig+0x33a>
 800103c:	e014      	b.n	8001068 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103e:	f7ff fb15 	bl	800066c <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff fb11 	bl	800066c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f241 3288 	movw	r2, #5000	; 0x1388
 8001054:	4293      	cmp	r3, r2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e078      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 800105e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1ee      	bne.n	8001046 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d105      	bne.n	800107a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800106e:	4a3b      	ldr	r2, [pc, #236]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d064      	beq.n	800114c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d05c      	beq.n	8001148 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d141      	bne.n	800111a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <HAL_RCC_OscConfig+0x480>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fae6 	bl	800066c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fae2 	bl	800066c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e04b      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010c2:	4926      	ldr	r1, [pc, #152]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69da      	ldr	r2, [r3, #28]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	019b      	lsls	r3, r3, #6
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	3b01      	subs	r3, #1
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	061b      	lsls	r3, r3, #24
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_RCC_OscConfig+0x480>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fabb 	bl	800066c <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fa:	f7ff fab7 	bl	800066c <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e020      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x41a>
 8001118:	e018      	b.n	800114c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_RCC_OscConfig+0x480>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff faa4 	bl	800066c <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff faa0 	bl	800066c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e009      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_RCC_OscConfig+0x47c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x448>
 8001146:	e001      	b.n	800114c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000
 800115c:	40023800 	.word	0x40023800
 8001160:	42470060 	.word	0x42470060

08001164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0ca      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b67      	ldr	r3, [pc, #412]	; (8001318 <HAL_RCC_ClockConfig+0x1b4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 020f 	and.w	r2, r3, #15
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d20c      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b64      	ldr	r3, [pc, #400]	; (8001318 <HAL_RCC_ClockConfig+0x1b4>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_RCC_ClockConfig+0x1b4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 020f 	and.w	r2, r3, #15
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0b6      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80011ba:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	4b52      	ldr	r3, [pc, #328]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	494f      	ldr	r1, [pc, #316]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80011de:	4b4f      	ldr	r3, [pc, #316]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d044      	beq.n	8001284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d119      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e07d      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d003      	beq.n	8001222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121e:	2b03      	cmp	r3, #3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06d      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e065      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001242:	4936      	ldr	r1, [pc, #216]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 0203 	bic.w	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001254:	f7ff fa0a 	bl	800066c <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	e00a      	b.n	8001272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125c:	f7ff fa06 	bl	800066c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	; 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e04d      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 020c 	and.w	r2, r3, #12
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d1eb      	bne.n	800125c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_RCC_ClockConfig+0x1b4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 020f 	and.w	r2, r3, #15
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_RCC_ClockConfig+0x1b4>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_RCC_ClockConfig+0x1b4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 020f 	and.w	r2, r3, #15
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e030      	b.n	800130e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b8:	4918      	ldr	r1, [pc, #96]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012d6:	4911      	ldr	r1, [pc, #68]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ea:	f000 f81d 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80012ee:	4601      	mov	r1, r0
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff f96c 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023c00 	.word	0x40023c00
 800131c:	40023800 	.word	0x40023800
 8001320:	08003460 	.word	0x08003460
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	b08f      	sub	sp, #60	; 0x3c
 800132e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001340:	4b62      	ldr	r3, [pc, #392]	; (80014cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b04      	cmp	r3, #4
 800134a:	d007      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x34>
 800134c:	2b08      	cmp	r3, #8
 800134e:	d008      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x3a>
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 80b2 	bne.w	80014ba <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001356:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800135a:	e0b1      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800135c:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001360:	e0ae      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001362:	4b5a      	ldr	r3, [pc, #360]	; (80014cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800136c:	4b57      	ldr	r3, [pc, #348]	; (80014cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d04e      	beq.n	8001416 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	4b54      	ldr	r3, [pc, #336]	; (80014cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	f04f 0400 	mov.w	r4, #0
 8001382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	ea01 0103 	and.w	r1, r1, r3
 800138e:	ea02 0204 	and.w	r2, r2, r4
 8001392:	460b      	mov	r3, r1
 8001394:	4614      	mov	r4, r2
 8001396:	0160      	lsls	r0, r4, #5
 8001398:	6278      	str	r0, [r7, #36]	; 0x24
 800139a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800139c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80013a0:	6278      	str	r0, [r7, #36]	; 0x24
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	623b      	str	r3, [r7, #32]
 80013a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80013aa:	1a5b      	subs	r3, r3, r1
 80013ac:	eb64 0402 	sbc.w	r4, r4, r2
 80013b0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80013b4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80013b8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80013bc:	ebb8 0803 	subs.w	r8, r8, r3
 80013c0:	eb69 0904 	sbc.w	r9, r9, r4
 80013c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80013dc:	eb18 0801 	adds.w	r8, r8, r1
 80013e0:	eb49 0902 	adc.w	r9, r9, r2
 80013e4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80013fc:	4640      	mov	r0, r8
 80013fe:	4649      	mov	r1, r9
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	f04f 0400 	mov.w	r4, #0
 8001406:	461a      	mov	r2, r3
 8001408:	4623      	mov	r3, r4
 800140a:	f7fe ff41 	bl	8000290 <__aeabi_uldivmod>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
 8001414:	e043      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	099b      	lsrs	r3, r3, #6
 800141c:	f04f 0400 	mov.w	r4, #0
 8001420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	ea01 0103 	and.w	r1, r1, r3
 800142c:	ea02 0204 	and.w	r2, r2, r4
 8001430:	460b      	mov	r3, r1
 8001432:	4614      	mov	r4, r2
 8001434:	0160      	lsls	r0, r4, #5
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001448:	1a5b      	subs	r3, r3, r1
 800144a:	eb64 0402 	sbc.w	r4, r4, r2
 800144e:	01a6      	lsls	r6, r4, #6
 8001450:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001454:	019d      	lsls	r5, r3, #6
 8001456:	1aed      	subs	r5, r5, r3
 8001458:	eb66 0604 	sbc.w	r6, r6, r4
 800145c:	00f3      	lsls	r3, r6, #3
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	00eb      	lsls	r3, r5, #3
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001470:	186d      	adds	r5, r5, r1
 8001472:	eb46 0602 	adc.w	r6, r6, r2
 8001476:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800147a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800147e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001482:	4655      	mov	r5, sl
 8001484:	465e      	mov	r6, fp
 8001486:	4628      	mov	r0, r5
 8001488:	4631      	mov	r1, r6
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	f04f 0400 	mov.w	r4, #0
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	f7fe fefc 	bl	8000290 <__aeabi_uldivmod>
 8001498:	4603      	mov	r3, r0
 800149a:	460c      	mov	r4, r1
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0c1b      	lsrs	r3, r3, #16
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	3301      	adds	r3, #1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80014ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014b8:	e002      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	373c      	adds	r7, #60	; 0x3c
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	00f42400 	.word	0x00f42400
 80014d4:	007a1200 	.word	0x007a1200

080014d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_RCC_GetHCLKFreq+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014f4:	f7ff fff0 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 80014f8:	4601      	mov	r1, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	0a9b      	lsrs	r3, r3, #10
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	08003470 	.word	0x08003470

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800151c:	f7ff ffdc 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 8001520:	4601      	mov	r1, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	0b5b      	lsrs	r3, r3, #13
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	08003470 	.word	0x08003470

08001540 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e03f      	b.n	80015d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 ffca 	bl	8002500 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2224      	movs	r2, #36	; 0x24
 8001570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	68d2      	ldr	r2, [r2, #12]
 800157e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001582:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fb3d 	bl	8001c04 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	6912      	ldr	r2, [r2, #16]
 8001594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	6952      	ldr	r2, [r2, #20]
 80015a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015a8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	68d2      	ldr	r2, [r2, #12]
 80015b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015b8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b088      	sub	sp, #32
 80015de:	af02      	add	r7, sp, #8
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	f040 8082 	bne.w	8001700 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_UART_Transmit+0x2e>
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e07a      	b.n	8001702 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_UART_Transmit+0x40>
 8001616:	2302      	movs	r3, #2
 8001618:	e073      	b.n	8001702 <HAL_UART_Transmit+0x128>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2221      	movs	r2, #33	; 0x21
 800162c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001630:	f7ff f81c 	bl	800066c <HAL_GetTick>
 8001634:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001642:	e041      	b.n	80016c8 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165a:	d121      	bne.n	80016a0 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2200      	movs	r2, #0
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f96a 	bl	8001940 <UART_WaitOnFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e045      	b.n	8001702 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001686:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d103      	bne.n	8001698 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3302      	adds	r3, #2
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	e017      	b.n	80016c8 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	3301      	adds	r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	e013      	b.n	80016c8 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2200      	movs	r2, #0
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f948 	bl	8001940 <UART_WaitOnFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e023      	b.n	8001702 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1c59      	adds	r1, r3, #1
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1b8      	bne.n	8001644 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f92f 	bl	8001940 <UART_WaitOnFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e00a      	b.n	8001702 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001700:	2302      	movs	r3, #2
  }
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10d      	bne.n	800175e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_UART_IRQHandler+0x52>
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f9db 	bl	8001b12 <UART_Receive_IT>
      return;
 800175c:	e0cc      	b.n	80018f8 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80ab 	beq.w	80018bc <HAL_UART_IRQHandler+0x1b0>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_UART_IRQHandler+0x70>
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a0 	beq.w	80018bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <HAL_UART_IRQHandler+0x90>
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <HAL_UART_IRQHandler+0xb0>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	f043 0202 	orr.w	r2, r3, #2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_UART_IRQHandler+0xd0>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	f043 0204 	orr.w	r2, r3, #4
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00a      	beq.n	80017fc <HAL_UART_IRQHandler+0xf0>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	f043 0208 	orr.w	r2, r3, #8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d078      	beq.n	80018f6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_UART_IRQHandler+0x112>
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f97a 	bl	8001b12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <HAL_UART_IRQHandler+0x13a>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d031      	beq.n	80018aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8c4 	bl	80019d4 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d023      	beq.n	80018a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	6952      	ldr	r2, [r2, #20]
 8001864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001868:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	2b00      	cmp	r3, #0
 8001870:	d013      	beq.n	800189a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	4a22      	ldr	r2, [pc, #136]	; (8001900 <HAL_UART_IRQHandler+0x1f4>)
 8001878:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f835 	bl	80008ee <HAL_DMA_Abort_IT>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001894:	4610      	mov	r0, r2
 8001896:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001898:	e00e      	b.n	80018b8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f846 	bl	800192c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018a0:	e00a      	b.n	80018b8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f842 	bl	800192c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018a8:	e006      	b.n	80018b8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f83e 	bl	800192c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80018b6:	e01e      	b.n	80018f6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018b8:	bf00      	nop
    return;
 80018ba:	e01c      	b.n	80018f6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <HAL_UART_IRQHandler+0x1cc>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f8b1 	bl	8001a38 <UART_Transmit_IT>
    return;
 80018d6:	e00f      	b.n	80018f8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00a      	beq.n	80018f8 <HAL_UART_IRQHandler+0x1ec>
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8f8 	bl	8001ae2 <UART_EndTransmit_IT>
    return;
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80018f6:	bf00      	nop
  }
}
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	08001a11 	.word	0x08001a11

08001904 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001950:	e02c      	b.n	80019ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d028      	beq.n	80019ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <UART_WaitOnFlagUntilTimeout+0x30>
 8001960:	f7fe fe84 	bl	800066c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	1ad2      	subs	r2, r2, r3
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	429a      	cmp	r2, r3
 800196e:	d91d      	bls.n	80019ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800197e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	6952      	ldr	r2, [r2, #20]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e00f      	b.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	401a      	ands	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d0c3      	beq.n	8001952 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	68d2      	ldr	r2, [r2, #12]
 80019e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	6952      	ldr	r2, [r2, #20]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff7e 	bl	800192c <HAL_UART_ErrorCallback>
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b21      	cmp	r3, #33	; 0x21
 8001a4a:	d143      	bne.n	8001ad4 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a54:	d119      	bne.n	8001a8a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a68:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	1c9a      	adds	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	621a      	str	r2, [r3, #32]
 8001a7c:	e00e      	b.n	8001a9c <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	621a      	str	r2, [r3, #32]
 8001a88:	e008      	b.n	8001a9c <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	1c58      	adds	r0, r3, #1
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6208      	str	r0, [r1, #32]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	68d2      	ldr	r2, [r2, #12]
 8001aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ace:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
  }
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	68d2      	ldr	r2, [r2, #12]
 8001af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fefe 	bl	8001904 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b22      	cmp	r3, #34	; 0x22
 8001b24:	d169      	bne.n	8001bfa <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2e:	d123      	bne.n	8001b78 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10e      	bne.n	8001b5c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	1c9a      	adds	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
 8001b5a:	e029      	b.n	8001bb0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
 8001b76:	e01b      	b.n	8001bb0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6291      	str	r1, [r2, #40]	; 0x28
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	6852      	ldr	r2, [r2, #4]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e00c      	b.n	8001bb0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6291      	str	r1, [r2, #40]	; 0x28
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	6852      	ldr	r2, [r2, #4]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d118      	bne.n	8001bf6 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	68d2      	ldr	r2, [r2, #12]
 8001bce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	6952      	ldr	r2, [r2, #20]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fe93 	bl	8001918 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e002      	b.n	8001bfc <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c40:	f023 030c 	bic.w	r3, r3, #12
 8001c44:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c78:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c94:	f040 80e4 	bne.w	8001e60 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4aab      	ldr	r2, [pc, #684]	; (8001f4c <UART_SetConfig+0x348>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <UART_SetConfig+0xa8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4aaa      	ldr	r2, [pc, #680]	; (8001f50 <UART_SetConfig+0x34c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d16c      	bne.n	8001d86 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681c      	ldr	r4, [r3, #0]
 8001cb0:	f7ff fc32 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	009a      	lsls	r2, r3, #2
 8001cbe:	441a      	add	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4aa2      	ldr	r2, [pc, #648]	; (8001f54 <UART_SetConfig+0x350>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	011d      	lsls	r5, r3, #4
 8001cd4:	f7ff fc20 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	009a      	lsls	r2, r3, #2
 8001ce2:	441a      	add	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fbb2 f6f3 	udiv	r6, r2, r3
 8001cee:	f7ff fc13 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009a      	lsls	r2, r3, #2
 8001cfc:	441a      	add	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	4a92      	ldr	r2, [pc, #584]	; (8001f54 <UART_SetConfig+0x350>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2264      	movs	r2, #100	; 0x64
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	1af3      	subs	r3, r6, r3
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	3332      	adds	r3, #50	; 0x32
 8001d1c:	4a8d      	ldr	r2, [pc, #564]	; (8001f54 <UART_SetConfig+0x350>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d2a:	441d      	add	r5, r3
 8001d2c:	f7ff fbf4 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	441a      	add	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fbb2 f6f3 	udiv	r6, r2, r3
 8001d46:	f7ff fbe7 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	4a7c      	ldr	r2, [pc, #496]	; (8001f54 <UART_SetConfig+0x350>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	1af3      	subs	r3, r6, r3
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <UART_SetConfig+0x350>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	442b      	add	r3, r5
 8001d82:	60a3      	str	r3, [r4, #8]
 8001d84:	e154      	b.n	8002030 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681c      	ldr	r4, [r3, #0]
 8001d8a:	f7ff fbb1 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4a6b      	ldr	r2, [pc, #428]	; (8001f54 <UART_SetConfig+0x350>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	011d      	lsls	r5, r3, #4
 8001dae:	f7ff fb9f 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	009a      	lsls	r2, r3, #2
 8001dbc:	441a      	add	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8001dc8:	f7ff fb92 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009a      	lsls	r2, r3, #2
 8001dd6:	441a      	add	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4a5c      	ldr	r2, [pc, #368]	; (8001f54 <UART_SetConfig+0x350>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	2264      	movs	r2, #100	; 0x64
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	1af3      	subs	r3, r6, r3
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	3332      	adds	r3, #50	; 0x32
 8001df6:	4a57      	ldr	r2, [pc, #348]	; (8001f54 <UART_SetConfig+0x350>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e04:	441d      	add	r5, r3
 8001e06:	f7ff fb73 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	009a      	lsls	r2, r3, #2
 8001e14:	441a      	add	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8001e20:	f7ff fb66 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009a      	lsls	r2, r3, #2
 8001e2e:	441a      	add	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <UART_SetConfig+0x350>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	2264      	movs	r2, #100	; 0x64
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	1af3      	subs	r3, r6, r3
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	3332      	adds	r3, #50	; 0x32
 8001e4e:	4a41      	ldr	r2, [pc, #260]	; (8001f54 <UART_SetConfig+0x350>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	442b      	add	r3, r5
 8001e5c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001e5e:	e0e7      	b.n	8002030 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a39      	ldr	r2, [pc, #228]	; (8001f4c <UART_SetConfig+0x348>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <UART_SetConfig+0x270>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <UART_SetConfig+0x34c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d171      	bne.n	8001f58 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681c      	ldr	r4, [r3, #0]
 8001e78:	f7ff fb4e 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	441a      	add	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4a30      	ldr	r2, [pc, #192]	; (8001f54 <UART_SetConfig+0x350>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	011d      	lsls	r5, r3, #4
 8001e9c:	f7ff fb3c 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009a      	lsls	r2, r3, #2
 8001eaa:	441a      	add	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8001eb6:	f7ff fb2f 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	441a      	add	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <UART_SetConfig+0x350>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2264      	movs	r2, #100	; 0x64
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	1af3      	subs	r3, r6, r3
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	3332      	adds	r3, #50	; 0x32
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <UART_SetConfig+0x350>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	441d      	add	r5, r3
 8001ef2:	f7ff fb11 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f0c:	f7ff fb04 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	441a      	add	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <UART_SetConfig+0x350>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	2264      	movs	r2, #100	; 0x64
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	1af3      	subs	r3, r6, r3
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <UART_SetConfig+0x350>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	442b      	add	r3, r5
 8001f48:	60a3      	str	r3, [r4, #8]
 8001f4a:	e071      	b.n	8002030 <UART_SetConfig+0x42c>
 8001f4c:	40011000 	.word	0x40011000
 8001f50:	40011400 	.word	0x40011400
 8001f54:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	f7ff fac8 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4a30      	ldr	r2, [pc, #192]	; (8002038 <UART_SetConfig+0x434>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	011d      	lsls	r5, r3, #4
 8001f80:	f7ff fab6 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009a      	lsls	r2, r3, #2
 8001f8e:	441a      	add	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f9a:	f7ff faa9 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009a      	lsls	r2, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <UART_SetConfig+0x434>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2264      	movs	r2, #100	; 0x64
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	1af3      	subs	r3, r6, r3
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	3332      	adds	r3, #50	; 0x32
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <UART_SetConfig+0x434>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	441d      	add	r5, r3
 8001fd6:	f7ff fa8b 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f6f3 	udiv	r6, r2, r3
 8001ff0:	f7ff fa7e 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	441a      	add	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <UART_SetConfig+0x434>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	2264      	movs	r2, #100	; 0x64
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	1af3      	subs	r3, r6, r3
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	3332      	adds	r3, #50	; 0x32
 800201e:	4a06      	ldr	r2, [pc, #24]	; (8002038 <UART_SetConfig+0x434>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	442b      	add	r3, r5
 800202c:	60a3      	str	r3, [r4, #8]
}
 800202e:	e7ff      	b.n	8002030 <UART_SetConfig+0x42c>
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <MX_GPIO_Init+0x8c>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_GPIO_Init+0x8c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_GPIO_Init+0x8c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800209c:	480b      	ldr	r0, [pc, #44]	; (80020cc <MX_GPIO_Init+0x90>)
 800209e:	f7fe fdf3 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80020a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_GPIO_Init+0x90>)
 80020bc:	f7fe fc3a 	bl	8000934 <HAL_GPIO_Init>

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40021800 	.word	0x40021800

080020d0 <__io_putchar>:
#if 1

// have to include syscalls.c file for the below fucntion to get executed.
// dragged the syscalls.c file on to the user folder..since all files are not linked..
int __io_putchar(int ch)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1,(uint8_t *) &ch,1,0xFFFF);
 80020d8:	1d39      	adds	r1, r7, #4
 80020da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020de:	2201      	movs	r2, #1
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <__io_putchar+0x20>)
 80020e2:	f7ff fa7a 	bl	80015da <HAL_UART_Transmit>
	 return ch;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2000009c 	.word	0x2000009c

080020f4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f8:	f7fe fa52 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020fc:	f000 f812 	bl	8002124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002100:	f7ff ff9c 	bl	800203c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002104:	f000 f9ce 	bl	80024a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
	  printf("Printf Implemented\n\r");
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <main+0x28>)
 800210a:	f000 fa81 	bl	8002610 <iprintf>

#if 0 // working 1
	  my_printf("Printf Implemented");
#endif
 //     HAL_UART_Transmit(&huart1,TxBuff,sizeof(TxBuff),100);
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13);
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <main+0x2c>)
 8002114:	f7fe fdd1 	bl	8000cba <HAL_GPIO_TogglePin>
	  printf("Printf Implemented\n\r");
 8002118:	e7f6      	b.n	8002108 <main+0x14>
 800211a:	bf00      	nop
 800211c:	08003428 	.word	0x08003428
 8002120:	40021800 	.word	0x40021800

08002124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b094      	sub	sp, #80	; 0x50
 8002128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4a2f      	ldr	r2, [pc, #188]	; (80021ec <SystemClock_Config+0xc8>)
 8002130:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <SystemClock_Config+0xc8>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <SystemClock_Config+0xc8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <SystemClock_Config+0xcc>)
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <SystemClock_Config+0xcc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <SystemClock_Config+0xcc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216a:	2301      	movs	r3, #1
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800216e:	2310      	movs	r3, #16
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fdb0 	bl	8000ce0 <HAL_RCC_OscConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <SystemClock_Config+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002186:	21d4      	movs	r1, #212	; 0xd4
 8002188:	481a      	ldr	r0, [pc, #104]	; (80021f4 <SystemClock_Config+0xd0>)
 800218a:	f000 f837 	bl	80021fc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218e:	230f      	movs	r3, #15
 8002190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe ffdb 	bl	8001164 <HAL_RCC_ClockConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <SystemClock_Config+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 80021b4:	21e2      	movs	r1, #226	; 0xe2
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <SystemClock_Config+0xd0>)
 80021b8:	f000 f820 	bl	80021fc <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80021bc:	f7ff f98c 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <SystemClock_Config+0xd4>)
 80021c4:	fba3 2302 	umull	r2, r3, r3, r2
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fb59 	bl	8000882 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021d0:	2004      	movs	r0, #4
 80021d2:	f7fe fb63 	bl	800089c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	f04f 30ff 	mov.w	r0, #4294967295
 80021de:	f7fe fb26 	bl	800082e <HAL_NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3750      	adds	r7, #80	; 0x50
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000
 80021f4:	08003440 	.word	0x08003440
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002206:	e7fe      	b.n	8002206 <_Error_Handler+0xa>

08002208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_MspInit+0xa0>)
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_MspInit+0xa0>)
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_MspInit+0xa0>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_MspInit+0xa0>)
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_MspInit+0xa0>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_MspInit+0xa0>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002246:	2003      	movs	r0, #3
 8002248:	f7fe fae6 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	f06f 000b 	mvn.w	r0, #11
 8002254:	f7fe faeb 	bl	800082e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	f06f 000a 	mvn.w	r0, #10
 8002260:	f7fe fae5 	bl	800082e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	f06f 0009 	mvn.w	r0, #9
 800226c:	f7fe fadf 	bl	800082e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	f06f 0004 	mvn.w	r0, #4
 8002278:	f7fe fad9 	bl	800082e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	f06f 0003 	mvn.w	r0, #3
 8002284:	f7fe fad3 	bl	800082e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	f06f 0001 	mvn.w	r0, #1
 8002290:	f7fe facd 	bl	800082e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7fe fac7 	bl	800082e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800

080022ac <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002300:	f7fe f9a0 	bl	8000644 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002304:	f7fe fae6 	bl	80008d4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <USART1_IRQHandler+0x10>)
 8002312:	f7ff f9fb 	bl	800170c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000009c 	.word	0x2000009c

08002320 <_write>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
	int i;
	for (i=0; i<len; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e009      	b.n	8002346 <_write+0x26>
	{
		__io_putchar(*(ptr++));
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	60ba      	str	r2, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fec8 	bl	80020d0 <__io_putchar>
	for (i=0; i<len; i++)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	dbf1      	blt.n	8002332 <_write+0x12>
	}
	return len;
 800234e:	687b      	ldr	r3, [r7, #4]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x50>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x16>
		heap_end = &end;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <_sbrk+0x50>)
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <_sbrk+0x54>)
 800236c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <_sbrk+0x50>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <_sbrk+0x50>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	466a      	mov	r2, sp
 800237e:	4293      	cmp	r3, r2
 8002380:	d905      	bls.n	800238e <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <_sbrk+0x58>)
 8002384:	220c      	movs	r2, #12
 8002386:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
 800238c:	e006      	b.n	800239c <_sbrk+0x44>
	}

	heap_end += incr;
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <_sbrk+0x50>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <_sbrk+0x50>)
 8002398:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	2000008c 	.word	0x2000008c
 80023ac:	200000e0 	.word	0x200000e0
 80023b0:	200000dc 	.word	0x200000dc

080023b4 <_close>:

int _close(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023dc:	605a      	str	r2, [r3, #4]
	return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_isatty>:

int _isatty(int file)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
	return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_read>:

int _read(int file, char *ptr, int len)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	return 0;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4a16      	ldr	r2, [pc, #88]	; (8002498 <SystemInit+0x60>)
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <SystemInit+0x60>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800244c:	4a13      	ldr	r2, [pc, #76]	; (800249c <SystemInit+0x64>)
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <SystemInit+0x64>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <SystemInit+0x64>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800245e:	4a0f      	ldr	r2, [pc, #60]	; (800249c <SystemInit+0x64>)
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <SystemInit+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <SystemInit+0x64>)
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <SystemInit+0x68>)
 8002472:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <SystemInit+0x64>)
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <SystemInit+0x64>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SystemInit+0x60>)
 8002488:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800248c:	609a      	str	r2, [r3, #8]
#endif
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00
 800249c:	40023800 	.word	0x40023800
 80024a0:	24003010 	.word	0x24003010

080024a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <MX_USART1_UART_Init+0x54>)
 80024ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <MX_USART1_UART_Init+0x50>)
 80024dc:	f7ff f830 	bl	8001540 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <MX_USART1_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024e6:	2142      	movs	r1, #66	; 0x42
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <MX_USART1_UART_Init+0x58>)
 80024ea:	f7ff fe87 	bl	80021fc <_Error_Handler>
  }

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000009c 	.word	0x2000009c
 80024f8:	40011000 	.word	0x40011000
 80024fc:	08003450 	.word	0x08003450

08002500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_UART_MspInit+0x68>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d126      	bne.n	8002560 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_UART_MspInit+0x6c>)
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_UART_MspInit+0x6c>)
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_UART_MspInit+0x6c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800252e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002532:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002538:	2301      	movs	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002540:	2307      	movs	r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4619      	mov	r1, r3
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <HAL_UART_MspInit+0x70>)
 800254c:	f7fe f9f2 	bl	8000934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	2025      	movs	r0, #37	; 0x25
 8002556:	f7fe f96a 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800255a:	2025      	movs	r0, #37	; 0x25
 800255c:	f7fe f983 	bl	8000866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40011000 	.word	0x40011000
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000

08002574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002578:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800257a:	e003      	b.n	8002584 <LoopCopyDataInit>

0800257c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800257e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002580:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002582:	3104      	adds	r1, #4

08002584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002588:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800258c:	d3f6      	bcc.n	800257c <CopyDataInit>
  ldr  r2, =_sbss
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002590:	e002      	b.n	8002598 <LoopFillZerobss>

08002592 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002592:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002594:	f842 3b04 	str.w	r3, [r2], #4

08002598 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800259a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800259c:	d3f9      	bcc.n	8002592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800259e:	f7ff ff4b 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f000 f811 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a6:	f7ff fda5 	bl	80020f4 <main>
  bx  lr    
 80025aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025b0:	08003520 	.word	0x08003520
  ldr  r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025b8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80025bc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80025c0:	200000e0 	.word	0x200000e0

080025c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC_IRQHandler>
	...

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	4e0d      	ldr	r6, [pc, #52]	; (8002600 <__libc_init_array+0x38>)
 80025cc:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <__libc_init_array+0x3c>)
 80025ce:	1ba4      	subs	r4, r4, r6
 80025d0:	10a4      	asrs	r4, r4, #2
 80025d2:	2500      	movs	r5, #0
 80025d4:	42a5      	cmp	r5, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	4e0b      	ldr	r6, [pc, #44]	; (8002608 <__libc_init_array+0x40>)
 80025da:	4c0c      	ldr	r4, [pc, #48]	; (800260c <__libc_init_array+0x44>)
 80025dc:	f000 ff18 	bl	8003410 <_init>
 80025e0:	1ba4      	subs	r4, r4, r6
 80025e2:	10a4      	asrs	r4, r4, #2
 80025e4:	2500      	movs	r5, #0
 80025e6:	42a5      	cmp	r5, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025f0:	4798      	blx	r3
 80025f2:	3501      	adds	r5, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025fa:	4798      	blx	r3
 80025fc:	3501      	adds	r5, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	08003518 	.word	0x08003518
 8002604:	08003518 	.word	0x08003518
 8002608:	08003518 	.word	0x08003518
 800260c:	0800351c 	.word	0x0800351c

08002610 <iprintf>:
 8002610:	b40f      	push	{r0, r1, r2, r3}
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <iprintf+0x2c>)
 8002614:	b513      	push	{r0, r1, r4, lr}
 8002616:	681c      	ldr	r4, [r3, #0]
 8002618:	b124      	cbz	r4, 8002624 <iprintf+0x14>
 800261a:	69a3      	ldr	r3, [r4, #24]
 800261c:	b913      	cbnz	r3, 8002624 <iprintf+0x14>
 800261e:	4620      	mov	r0, r4
 8002620:	f000 f84e 	bl	80026c0 <__sinit>
 8002624:	ab05      	add	r3, sp, #20
 8002626:	9a04      	ldr	r2, [sp, #16]
 8002628:	68a1      	ldr	r1, [r4, #8]
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	4620      	mov	r0, r4
 800262e:	f000 f9af 	bl	8002990 <_vfiprintf_r>
 8002632:	b002      	add	sp, #8
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002638:	b004      	add	sp, #16
 800263a:	4770      	bx	lr
 800263c:	2000000c 	.word	0x2000000c

08002640 <_cleanup_r>:
 8002640:	4901      	ldr	r1, [pc, #4]	; (8002648 <_cleanup_r+0x8>)
 8002642:	f000 b8a9 	b.w	8002798 <_fwalk_reent>
 8002646:	bf00      	nop
 8002648:	08003265 	.word	0x08003265

0800264c <std.isra.0>:
 800264c:	2300      	movs	r3, #0
 800264e:	b510      	push	{r4, lr}
 8002650:	4604      	mov	r4, r0
 8002652:	6003      	str	r3, [r0, #0]
 8002654:	6043      	str	r3, [r0, #4]
 8002656:	6083      	str	r3, [r0, #8]
 8002658:	8181      	strh	r1, [r0, #12]
 800265a:	6643      	str	r3, [r0, #100]	; 0x64
 800265c:	81c2      	strh	r2, [r0, #14]
 800265e:	6103      	str	r3, [r0, #16]
 8002660:	6143      	str	r3, [r0, #20]
 8002662:	6183      	str	r3, [r0, #24]
 8002664:	4619      	mov	r1, r3
 8002666:	2208      	movs	r2, #8
 8002668:	305c      	adds	r0, #92	; 0x5c
 800266a:	f000 f8b3 	bl	80027d4 <memset>
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <std.isra.0+0x38>)
 8002670:	6263      	str	r3, [r4, #36]	; 0x24
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <std.isra.0+0x3c>)
 8002674:	62a3      	str	r3, [r4, #40]	; 0x28
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <std.isra.0+0x40>)
 8002678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <std.isra.0+0x44>)
 800267c:	6224      	str	r4, [r4, #32]
 800267e:	6323      	str	r3, [r4, #48]	; 0x30
 8002680:	bd10      	pop	{r4, pc}
 8002682:	bf00      	nop
 8002684:	08002f09 	.word	0x08002f09
 8002688:	08002f2b 	.word	0x08002f2b
 800268c:	08002f63 	.word	0x08002f63
 8002690:	08002f87 	.word	0x08002f87

08002694 <__sfmoreglue>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	1e4a      	subs	r2, r1, #1
 8002698:	2568      	movs	r5, #104	; 0x68
 800269a:	4355      	muls	r5, r2
 800269c:	460e      	mov	r6, r1
 800269e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026a2:	f000 f8ed 	bl	8002880 <_malloc_r>
 80026a6:	4604      	mov	r4, r0
 80026a8:	b140      	cbz	r0, 80026bc <__sfmoreglue+0x28>
 80026aa:	2100      	movs	r1, #0
 80026ac:	e880 0042 	stmia.w	r0, {r1, r6}
 80026b0:	300c      	adds	r0, #12
 80026b2:	60a0      	str	r0, [r4, #8]
 80026b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026b8:	f000 f88c 	bl	80027d4 <memset>
 80026bc:	4620      	mov	r0, r4
 80026be:	bd70      	pop	{r4, r5, r6, pc}

080026c0 <__sinit>:
 80026c0:	6983      	ldr	r3, [r0, #24]
 80026c2:	b510      	push	{r4, lr}
 80026c4:	4604      	mov	r4, r0
 80026c6:	bb33      	cbnz	r3, 8002716 <__sinit+0x56>
 80026c8:	6483      	str	r3, [r0, #72]	; 0x48
 80026ca:	64c3      	str	r3, [r0, #76]	; 0x4c
 80026cc:	6503      	str	r3, [r0, #80]	; 0x50
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <__sinit+0x58>)
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <__sinit+0x5c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6282      	str	r2, [r0, #40]	; 0x28
 80026d6:	4298      	cmp	r0, r3
 80026d8:	bf04      	itt	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	6183      	streq	r3, [r0, #24]
 80026de:	f000 f81f 	bl	8002720 <__sfp>
 80026e2:	6060      	str	r0, [r4, #4]
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 f81b 	bl	8002720 <__sfp>
 80026ea:	60a0      	str	r0, [r4, #8]
 80026ec:	4620      	mov	r0, r4
 80026ee:	f000 f817 	bl	8002720 <__sfp>
 80026f2:	2200      	movs	r2, #0
 80026f4:	60e0      	str	r0, [r4, #12]
 80026f6:	2104      	movs	r1, #4
 80026f8:	6860      	ldr	r0, [r4, #4]
 80026fa:	f7ff ffa7 	bl	800264c <std.isra.0>
 80026fe:	2201      	movs	r2, #1
 8002700:	2109      	movs	r1, #9
 8002702:	68a0      	ldr	r0, [r4, #8]
 8002704:	f7ff ffa2 	bl	800264c <std.isra.0>
 8002708:	2202      	movs	r2, #2
 800270a:	2112      	movs	r1, #18
 800270c:	68e0      	ldr	r0, [r4, #12]
 800270e:	f7ff ff9d 	bl	800264c <std.isra.0>
 8002712:	2301      	movs	r3, #1
 8002714:	61a3      	str	r3, [r4, #24]
 8002716:	bd10      	pop	{r4, pc}
 8002718:	080034d8 	.word	0x080034d8
 800271c:	08002641 	.word	0x08002641

08002720 <__sfp>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <__sfp+0x74>)
 8002724:	681e      	ldr	r6, [r3, #0]
 8002726:	69b3      	ldr	r3, [r6, #24]
 8002728:	4607      	mov	r7, r0
 800272a:	b913      	cbnz	r3, 8002732 <__sfp+0x12>
 800272c:	4630      	mov	r0, r6
 800272e:	f7ff ffc7 	bl	80026c0 <__sinit>
 8002732:	3648      	adds	r6, #72	; 0x48
 8002734:	68b4      	ldr	r4, [r6, #8]
 8002736:	6873      	ldr	r3, [r6, #4]
 8002738:	3b01      	subs	r3, #1
 800273a:	d503      	bpl.n	8002744 <__sfp+0x24>
 800273c:	6833      	ldr	r3, [r6, #0]
 800273e:	b133      	cbz	r3, 800274e <__sfp+0x2e>
 8002740:	6836      	ldr	r6, [r6, #0]
 8002742:	e7f7      	b.n	8002734 <__sfp+0x14>
 8002744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002748:	b16d      	cbz	r5, 8002766 <__sfp+0x46>
 800274a:	3468      	adds	r4, #104	; 0x68
 800274c:	e7f4      	b.n	8002738 <__sfp+0x18>
 800274e:	2104      	movs	r1, #4
 8002750:	4638      	mov	r0, r7
 8002752:	f7ff ff9f 	bl	8002694 <__sfmoreglue>
 8002756:	6030      	str	r0, [r6, #0]
 8002758:	2800      	cmp	r0, #0
 800275a:	d1f1      	bne.n	8002740 <__sfp+0x20>
 800275c:	230c      	movs	r3, #12
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4604      	mov	r4, r0
 8002762:	4620      	mov	r0, r4
 8002764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800276a:	81e3      	strh	r3, [r4, #14]
 800276c:	2301      	movs	r3, #1
 800276e:	81a3      	strh	r3, [r4, #12]
 8002770:	6665      	str	r5, [r4, #100]	; 0x64
 8002772:	6025      	str	r5, [r4, #0]
 8002774:	60a5      	str	r5, [r4, #8]
 8002776:	6065      	str	r5, [r4, #4]
 8002778:	6125      	str	r5, [r4, #16]
 800277a:	6165      	str	r5, [r4, #20]
 800277c:	61a5      	str	r5, [r4, #24]
 800277e:	2208      	movs	r2, #8
 8002780:	4629      	mov	r1, r5
 8002782:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002786:	f000 f825 	bl	80027d4 <memset>
 800278a:	6365      	str	r5, [r4, #52]	; 0x34
 800278c:	63a5      	str	r5, [r4, #56]	; 0x38
 800278e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002790:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002792:	e7e6      	b.n	8002762 <__sfp+0x42>
 8002794:	080034d8 	.word	0x080034d8

08002798 <_fwalk_reent>:
 8002798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800279c:	4680      	mov	r8, r0
 800279e:	4689      	mov	r9, r1
 80027a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027a4:	2600      	movs	r6, #0
 80027a6:	b914      	cbnz	r4, 80027ae <_fwalk_reent+0x16>
 80027a8:	4630      	mov	r0, r6
 80027aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ae:	68a5      	ldr	r5, [r4, #8]
 80027b0:	6867      	ldr	r7, [r4, #4]
 80027b2:	3f01      	subs	r7, #1
 80027b4:	d501      	bpl.n	80027ba <_fwalk_reent+0x22>
 80027b6:	6824      	ldr	r4, [r4, #0]
 80027b8:	e7f5      	b.n	80027a6 <_fwalk_reent+0xe>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d907      	bls.n	80027d0 <_fwalk_reent+0x38>
 80027c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027c4:	3301      	adds	r3, #1
 80027c6:	d003      	beq.n	80027d0 <_fwalk_reent+0x38>
 80027c8:	4629      	mov	r1, r5
 80027ca:	4640      	mov	r0, r8
 80027cc:	47c8      	blx	r9
 80027ce:	4306      	orrs	r6, r0
 80027d0:	3568      	adds	r5, #104	; 0x68
 80027d2:	e7ee      	b.n	80027b2 <_fwalk_reent+0x1a>

080027d4 <memset>:
 80027d4:	4402      	add	r2, r0
 80027d6:	4603      	mov	r3, r0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d100      	bne.n	80027de <memset+0xa>
 80027dc:	4770      	bx	lr
 80027de:	f803 1b01 	strb.w	r1, [r3], #1
 80027e2:	e7f9      	b.n	80027d8 <memset+0x4>

080027e4 <_free_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4605      	mov	r5, r0
 80027e8:	2900      	cmp	r1, #0
 80027ea:	d045      	beq.n	8002878 <_free_r+0x94>
 80027ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027f0:	1f0c      	subs	r4, r1, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bfb8      	it	lt
 80027f6:	18e4      	addlt	r4, r4, r3
 80027f8:	f000 fdd4 	bl	80033a4 <__malloc_lock>
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <_free_r+0x98>)
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	4610      	mov	r0, r2
 8002802:	b933      	cbnz	r3, 8002812 <_free_r+0x2e>
 8002804:	6063      	str	r3, [r4, #4]
 8002806:	6014      	str	r4, [r2, #0]
 8002808:	4628      	mov	r0, r5
 800280a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800280e:	f000 bdca 	b.w	80033a6 <__malloc_unlock>
 8002812:	42a3      	cmp	r3, r4
 8002814:	d90c      	bls.n	8002830 <_free_r+0x4c>
 8002816:	6821      	ldr	r1, [r4, #0]
 8002818:	1862      	adds	r2, r4, r1
 800281a:	4293      	cmp	r3, r2
 800281c:	bf04      	itt	eq
 800281e:	681a      	ldreq	r2, [r3, #0]
 8002820:	685b      	ldreq	r3, [r3, #4]
 8002822:	6063      	str	r3, [r4, #4]
 8002824:	bf04      	itt	eq
 8002826:	1852      	addeq	r2, r2, r1
 8002828:	6022      	streq	r2, [r4, #0]
 800282a:	6004      	str	r4, [r0, #0]
 800282c:	e7ec      	b.n	8002808 <_free_r+0x24>
 800282e:	4613      	mov	r3, r2
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	b10a      	cbz	r2, 8002838 <_free_r+0x54>
 8002834:	42a2      	cmp	r2, r4
 8002836:	d9fa      	bls.n	800282e <_free_r+0x4a>
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	1858      	adds	r0, r3, r1
 800283c:	42a0      	cmp	r0, r4
 800283e:	d10b      	bne.n	8002858 <_free_r+0x74>
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	4401      	add	r1, r0
 8002844:	1858      	adds	r0, r3, r1
 8002846:	4282      	cmp	r2, r0
 8002848:	6019      	str	r1, [r3, #0]
 800284a:	d1dd      	bne.n	8002808 <_free_r+0x24>
 800284c:	6810      	ldr	r0, [r2, #0]
 800284e:	6852      	ldr	r2, [r2, #4]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	4401      	add	r1, r0
 8002854:	6019      	str	r1, [r3, #0]
 8002856:	e7d7      	b.n	8002808 <_free_r+0x24>
 8002858:	d902      	bls.n	8002860 <_free_r+0x7c>
 800285a:	230c      	movs	r3, #12
 800285c:	602b      	str	r3, [r5, #0]
 800285e:	e7d3      	b.n	8002808 <_free_r+0x24>
 8002860:	6820      	ldr	r0, [r4, #0]
 8002862:	1821      	adds	r1, r4, r0
 8002864:	428a      	cmp	r2, r1
 8002866:	bf04      	itt	eq
 8002868:	6811      	ldreq	r1, [r2, #0]
 800286a:	6852      	ldreq	r2, [r2, #4]
 800286c:	6062      	str	r2, [r4, #4]
 800286e:	bf04      	itt	eq
 8002870:	1809      	addeq	r1, r1, r0
 8002872:	6021      	streq	r1, [r4, #0]
 8002874:	605c      	str	r4, [r3, #4]
 8002876:	e7c7      	b.n	8002808 <_free_r+0x24>
 8002878:	bd38      	pop	{r3, r4, r5, pc}
 800287a:	bf00      	nop
 800287c:	20000090 	.word	0x20000090

08002880 <_malloc_r>:
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	1ccd      	adds	r5, r1, #3
 8002884:	f025 0503 	bic.w	r5, r5, #3
 8002888:	3508      	adds	r5, #8
 800288a:	2d0c      	cmp	r5, #12
 800288c:	bf38      	it	cc
 800288e:	250c      	movcc	r5, #12
 8002890:	2d00      	cmp	r5, #0
 8002892:	4606      	mov	r6, r0
 8002894:	db01      	blt.n	800289a <_malloc_r+0x1a>
 8002896:	42a9      	cmp	r1, r5
 8002898:	d903      	bls.n	80028a2 <_malloc_r+0x22>
 800289a:	230c      	movs	r3, #12
 800289c:	6033      	str	r3, [r6, #0]
 800289e:	2000      	movs	r0, #0
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
 80028a2:	f000 fd7f 	bl	80033a4 <__malloc_lock>
 80028a6:	4a23      	ldr	r2, [pc, #140]	; (8002934 <_malloc_r+0xb4>)
 80028a8:	6814      	ldr	r4, [r2, #0]
 80028aa:	4621      	mov	r1, r4
 80028ac:	b991      	cbnz	r1, 80028d4 <_malloc_r+0x54>
 80028ae:	4c22      	ldr	r4, [pc, #136]	; (8002938 <_malloc_r+0xb8>)
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	b91b      	cbnz	r3, 80028bc <_malloc_r+0x3c>
 80028b4:	4630      	mov	r0, r6
 80028b6:	f000 fb17 	bl	8002ee8 <_sbrk_r>
 80028ba:	6020      	str	r0, [r4, #0]
 80028bc:	4629      	mov	r1, r5
 80028be:	4630      	mov	r0, r6
 80028c0:	f000 fb12 	bl	8002ee8 <_sbrk_r>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d126      	bne.n	8002916 <_malloc_r+0x96>
 80028c8:	230c      	movs	r3, #12
 80028ca:	6033      	str	r3, [r6, #0]
 80028cc:	4630      	mov	r0, r6
 80028ce:	f000 fd6a 	bl	80033a6 <__malloc_unlock>
 80028d2:	e7e4      	b.n	800289e <_malloc_r+0x1e>
 80028d4:	680b      	ldr	r3, [r1, #0]
 80028d6:	1b5b      	subs	r3, r3, r5
 80028d8:	d41a      	bmi.n	8002910 <_malloc_r+0x90>
 80028da:	2b0b      	cmp	r3, #11
 80028dc:	d90f      	bls.n	80028fe <_malloc_r+0x7e>
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	50cd      	str	r5, [r1, r3]
 80028e2:	18cc      	adds	r4, r1, r3
 80028e4:	4630      	mov	r0, r6
 80028e6:	f000 fd5e 	bl	80033a6 <__malloc_unlock>
 80028ea:	f104 000b 	add.w	r0, r4, #11
 80028ee:	1d23      	adds	r3, r4, #4
 80028f0:	f020 0007 	bic.w	r0, r0, #7
 80028f4:	1ac3      	subs	r3, r0, r3
 80028f6:	d01b      	beq.n	8002930 <_malloc_r+0xb0>
 80028f8:	425a      	negs	r2, r3
 80028fa:	50e2      	str	r2, [r4, r3]
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
 80028fe:	428c      	cmp	r4, r1
 8002900:	bf0d      	iteet	eq
 8002902:	6863      	ldreq	r3, [r4, #4]
 8002904:	684b      	ldrne	r3, [r1, #4]
 8002906:	6063      	strne	r3, [r4, #4]
 8002908:	6013      	streq	r3, [r2, #0]
 800290a:	bf18      	it	ne
 800290c:	460c      	movne	r4, r1
 800290e:	e7e9      	b.n	80028e4 <_malloc_r+0x64>
 8002910:	460c      	mov	r4, r1
 8002912:	6849      	ldr	r1, [r1, #4]
 8002914:	e7ca      	b.n	80028ac <_malloc_r+0x2c>
 8002916:	1cc4      	adds	r4, r0, #3
 8002918:	f024 0403 	bic.w	r4, r4, #3
 800291c:	42a0      	cmp	r0, r4
 800291e:	d005      	beq.n	800292c <_malloc_r+0xac>
 8002920:	1a21      	subs	r1, r4, r0
 8002922:	4630      	mov	r0, r6
 8002924:	f000 fae0 	bl	8002ee8 <_sbrk_r>
 8002928:	3001      	adds	r0, #1
 800292a:	d0cd      	beq.n	80028c8 <_malloc_r+0x48>
 800292c:	6025      	str	r5, [r4, #0]
 800292e:	e7d9      	b.n	80028e4 <_malloc_r+0x64>
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	bf00      	nop
 8002934:	20000090 	.word	0x20000090
 8002938:	20000094 	.word	0x20000094

0800293c <__sfputc_r>:
 800293c:	6893      	ldr	r3, [r2, #8]
 800293e:	3b01      	subs	r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	b410      	push	{r4}
 8002944:	6093      	str	r3, [r2, #8]
 8002946:	da09      	bge.n	800295c <__sfputc_r+0x20>
 8002948:	6994      	ldr	r4, [r2, #24]
 800294a:	42a3      	cmp	r3, r4
 800294c:	db02      	blt.n	8002954 <__sfputc_r+0x18>
 800294e:	b2cb      	uxtb	r3, r1
 8002950:	2b0a      	cmp	r3, #10
 8002952:	d103      	bne.n	800295c <__sfputc_r+0x20>
 8002954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002958:	f000 bb1a 	b.w	8002f90 <__swbuf_r>
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	1c58      	adds	r0, r3, #1
 8002960:	6010      	str	r0, [r2, #0]
 8002962:	7019      	strb	r1, [r3, #0]
 8002964:	b2c8      	uxtb	r0, r1
 8002966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800296a:	4770      	bx	lr

0800296c <__sfputs_r>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	4606      	mov	r6, r0
 8002970:	460f      	mov	r7, r1
 8002972:	4614      	mov	r4, r2
 8002974:	18d5      	adds	r5, r2, r3
 8002976:	42ac      	cmp	r4, r5
 8002978:	d101      	bne.n	800297e <__sfputs_r+0x12>
 800297a:	2000      	movs	r0, #0
 800297c:	e007      	b.n	800298e <__sfputs_r+0x22>
 800297e:	463a      	mov	r2, r7
 8002980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002984:	4630      	mov	r0, r6
 8002986:	f7ff ffd9 	bl	800293c <__sfputc_r>
 800298a:	1c43      	adds	r3, r0, #1
 800298c:	d1f3      	bne.n	8002976 <__sfputs_r+0xa>
 800298e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002990 <_vfiprintf_r>:
 8002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002994:	b09d      	sub	sp, #116	; 0x74
 8002996:	460c      	mov	r4, r1
 8002998:	4617      	mov	r7, r2
 800299a:	9303      	str	r3, [sp, #12]
 800299c:	4606      	mov	r6, r0
 800299e:	b118      	cbz	r0, 80029a8 <_vfiprintf_r+0x18>
 80029a0:	6983      	ldr	r3, [r0, #24]
 80029a2:	b90b      	cbnz	r3, 80029a8 <_vfiprintf_r+0x18>
 80029a4:	f7ff fe8c 	bl	80026c0 <__sinit>
 80029a8:	4b7c      	ldr	r3, [pc, #496]	; (8002b9c <_vfiprintf_r+0x20c>)
 80029aa:	429c      	cmp	r4, r3
 80029ac:	d157      	bne.n	8002a5e <_vfiprintf_r+0xce>
 80029ae:	6874      	ldr	r4, [r6, #4]
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	0718      	lsls	r0, r3, #28
 80029b4:	d55d      	bpl.n	8002a72 <_vfiprintf_r+0xe2>
 80029b6:	6923      	ldr	r3, [r4, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d05a      	beq.n	8002a72 <_vfiprintf_r+0xe2>
 80029bc:	2300      	movs	r3, #0
 80029be:	9309      	str	r3, [sp, #36]	; 0x24
 80029c0:	2320      	movs	r3, #32
 80029c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029c6:	2330      	movs	r3, #48	; 0x30
 80029c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029cc:	f04f 0b01 	mov.w	fp, #1
 80029d0:	46b8      	mov	r8, r7
 80029d2:	4645      	mov	r5, r8
 80029d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d155      	bne.n	8002a88 <_vfiprintf_r+0xf8>
 80029dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80029e0:	d00b      	beq.n	80029fa <_vfiprintf_r+0x6a>
 80029e2:	4653      	mov	r3, sl
 80029e4:	463a      	mov	r2, r7
 80029e6:	4621      	mov	r1, r4
 80029e8:	4630      	mov	r0, r6
 80029ea:	f7ff ffbf 	bl	800296c <__sfputs_r>
 80029ee:	3001      	adds	r0, #1
 80029f0:	f000 80c4 	beq.w	8002b7c <_vfiprintf_r+0x1ec>
 80029f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f6:	4453      	add	r3, sl
 80029f8:	9309      	str	r3, [sp, #36]	; 0x24
 80029fa:	f898 3000 	ldrb.w	r3, [r8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80bc 	beq.w	8002b7c <_vfiprintf_r+0x1ec>
 8002a04:	2300      	movs	r3, #0
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	9304      	str	r3, [sp, #16]
 8002a0c:	9307      	str	r3, [sp, #28]
 8002a0e:	9205      	str	r2, [sp, #20]
 8002a10:	9306      	str	r3, [sp, #24]
 8002a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a16:	931a      	str	r3, [sp, #104]	; 0x68
 8002a18:	2205      	movs	r2, #5
 8002a1a:	7829      	ldrb	r1, [r5, #0]
 8002a1c:	4860      	ldr	r0, [pc, #384]	; (8002ba0 <_vfiprintf_r+0x210>)
 8002a1e:	f7fd fbe7 	bl	80001f0 <memchr>
 8002a22:	f105 0801 	add.w	r8, r5, #1
 8002a26:	9b04      	ldr	r3, [sp, #16]
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d131      	bne.n	8002a90 <_vfiprintf_r+0x100>
 8002a2c:	06d9      	lsls	r1, r3, #27
 8002a2e:	bf44      	itt	mi
 8002a30:	2220      	movmi	r2, #32
 8002a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a36:	071a      	lsls	r2, r3, #28
 8002a38:	bf44      	itt	mi
 8002a3a:	222b      	movmi	r2, #43	; 0x2b
 8002a3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a40:	782a      	ldrb	r2, [r5, #0]
 8002a42:	2a2a      	cmp	r2, #42	; 0x2a
 8002a44:	d02c      	beq.n	8002aa0 <_vfiprintf_r+0x110>
 8002a46:	9a07      	ldr	r2, [sp, #28]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	200a      	movs	r0, #10
 8002a4c:	46a8      	mov	r8, r5
 8002a4e:	3501      	adds	r5, #1
 8002a50:	f898 3000 	ldrb.w	r3, [r8]
 8002a54:	3b30      	subs	r3, #48	; 0x30
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d96d      	bls.n	8002b36 <_vfiprintf_r+0x1a6>
 8002a5a:	b371      	cbz	r1, 8002aba <_vfiprintf_r+0x12a>
 8002a5c:	e026      	b.n	8002aac <_vfiprintf_r+0x11c>
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <_vfiprintf_r+0x214>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d101      	bne.n	8002a68 <_vfiprintf_r+0xd8>
 8002a64:	68b4      	ldr	r4, [r6, #8]
 8002a66:	e7a3      	b.n	80029b0 <_vfiprintf_r+0x20>
 8002a68:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <_vfiprintf_r+0x218>)
 8002a6a:	429c      	cmp	r4, r3
 8002a6c:	bf08      	it	eq
 8002a6e:	68f4      	ldreq	r4, [r6, #12]
 8002a70:	e79e      	b.n	80029b0 <_vfiprintf_r+0x20>
 8002a72:	4621      	mov	r1, r4
 8002a74:	4630      	mov	r0, r6
 8002a76:	f000 faef 	bl	8003058 <__swsetup_r>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d09e      	beq.n	80029bc <_vfiprintf_r+0x2c>
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	b01d      	add	sp, #116	; 0x74
 8002a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a88:	2b25      	cmp	r3, #37	; 0x25
 8002a8a:	d0a7      	beq.n	80029dc <_vfiprintf_r+0x4c>
 8002a8c:	46a8      	mov	r8, r5
 8002a8e:	e7a0      	b.n	80029d2 <_vfiprintf_r+0x42>
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <_vfiprintf_r+0x210>)
 8002a92:	1a80      	subs	r0, r0, r2
 8002a94:	fa0b f000 	lsl.w	r0, fp, r0
 8002a98:	4318      	orrs	r0, r3
 8002a9a:	9004      	str	r0, [sp, #16]
 8002a9c:	4645      	mov	r5, r8
 8002a9e:	e7bb      	b.n	8002a18 <_vfiprintf_r+0x88>
 8002aa0:	9a03      	ldr	r2, [sp, #12]
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	9103      	str	r1, [sp, #12]
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	db01      	blt.n	8002ab0 <_vfiprintf_r+0x120>
 8002aac:	9207      	str	r2, [sp, #28]
 8002aae:	e004      	b.n	8002aba <_vfiprintf_r+0x12a>
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	9207      	str	r2, [sp, #28]
 8002ab8:	9304      	str	r3, [sp, #16]
 8002aba:	f898 3000 	ldrb.w	r3, [r8]
 8002abe:	2b2e      	cmp	r3, #46	; 0x2e
 8002ac0:	d110      	bne.n	8002ae4 <_vfiprintf_r+0x154>
 8002ac2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ac8:	f108 0101 	add.w	r1, r8, #1
 8002acc:	d137      	bne.n	8002b3e <_vfiprintf_r+0x1ae>
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	1d1a      	adds	r2, r3, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	9203      	str	r2, [sp, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfb8      	it	lt
 8002ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ade:	f108 0802 	add.w	r8, r8, #2
 8002ae2:	9305      	str	r3, [sp, #20]
 8002ae4:	4d31      	ldr	r5, [pc, #196]	; (8002bac <_vfiprintf_r+0x21c>)
 8002ae6:	f898 1000 	ldrb.w	r1, [r8]
 8002aea:	2203      	movs	r2, #3
 8002aec:	4628      	mov	r0, r5
 8002aee:	f7fd fb7f 	bl	80001f0 <memchr>
 8002af2:	b140      	cbz	r0, 8002b06 <_vfiprintf_r+0x176>
 8002af4:	2340      	movs	r3, #64	; 0x40
 8002af6:	1b40      	subs	r0, r0, r5
 8002af8:	fa03 f000 	lsl.w	r0, r3, r0
 8002afc:	9b04      	ldr	r3, [sp, #16]
 8002afe:	4303      	orrs	r3, r0
 8002b00:	9304      	str	r3, [sp, #16]
 8002b02:	f108 0801 	add.w	r8, r8, #1
 8002b06:	f898 1000 	ldrb.w	r1, [r8]
 8002b0a:	4829      	ldr	r0, [pc, #164]	; (8002bb0 <_vfiprintf_r+0x220>)
 8002b0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b10:	2206      	movs	r2, #6
 8002b12:	f108 0701 	add.w	r7, r8, #1
 8002b16:	f7fd fb6b 	bl	80001f0 <memchr>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d034      	beq.n	8002b88 <_vfiprintf_r+0x1f8>
 8002b1e:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <_vfiprintf_r+0x224>)
 8002b20:	bb03      	cbnz	r3, 8002b64 <_vfiprintf_r+0x1d4>
 8002b22:	9b03      	ldr	r3, [sp, #12]
 8002b24:	3307      	adds	r3, #7
 8002b26:	f023 0307 	bic.w	r3, r3, #7
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b30:	444b      	add	r3, r9
 8002b32:	9309      	str	r3, [sp, #36]	; 0x24
 8002b34:	e74c      	b.n	80029d0 <_vfiprintf_r+0x40>
 8002b36:	fb00 3202 	mla	r2, r0, r2, r3
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	e786      	b.n	8002a4c <_vfiprintf_r+0xbc>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9305      	str	r3, [sp, #20]
 8002b42:	4618      	mov	r0, r3
 8002b44:	250a      	movs	r5, #10
 8002b46:	4688      	mov	r8, r1
 8002b48:	3101      	adds	r1, #1
 8002b4a:	f898 2000 	ldrb.w	r2, [r8]
 8002b4e:	3a30      	subs	r2, #48	; 0x30
 8002b50:	2a09      	cmp	r2, #9
 8002b52:	d903      	bls.n	8002b5c <_vfiprintf_r+0x1cc>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0c5      	beq.n	8002ae4 <_vfiprintf_r+0x154>
 8002b58:	9005      	str	r0, [sp, #20]
 8002b5a:	e7c3      	b.n	8002ae4 <_vfiprintf_r+0x154>
 8002b5c:	fb05 2000 	mla	r0, r5, r0, r2
 8002b60:	2301      	movs	r3, #1
 8002b62:	e7f0      	b.n	8002b46 <_vfiprintf_r+0x1b6>
 8002b64:	ab03      	add	r3, sp, #12
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	4622      	mov	r2, r4
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_vfiprintf_r+0x228>)
 8002b6c:	a904      	add	r1, sp, #16
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f3af 8000 	nop.w
 8002b74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b78:	4681      	mov	r9, r0
 8002b7a:	d1d8      	bne.n	8002b2e <_vfiprintf_r+0x19e>
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	065b      	lsls	r3, r3, #25
 8002b80:	f53f af7d 	bmi.w	8002a7e <_vfiprintf_r+0xee>
 8002b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b86:	e77c      	b.n	8002a82 <_vfiprintf_r+0xf2>
 8002b88:	ab03      	add	r3, sp, #12
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <_vfiprintf_r+0x228>)
 8002b90:	a904      	add	r1, sp, #16
 8002b92:	4630      	mov	r0, r6
 8002b94:	f000 f888 	bl	8002ca8 <_printf_i>
 8002b98:	e7ec      	b.n	8002b74 <_vfiprintf_r+0x1e4>
 8002b9a:	bf00      	nop
 8002b9c:	08003498 	.word	0x08003498
 8002ba0:	080034dc 	.word	0x080034dc
 8002ba4:	080034b8 	.word	0x080034b8
 8002ba8:	08003478 	.word	0x08003478
 8002bac:	080034e2 	.word	0x080034e2
 8002bb0:	080034e6 	.word	0x080034e6
 8002bb4:	00000000 	.word	0x00000000
 8002bb8:	0800296d 	.word	0x0800296d

08002bbc <_printf_common>:
 8002bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc0:	4691      	mov	r9, r2
 8002bc2:	461f      	mov	r7, r3
 8002bc4:	688a      	ldr	r2, [r1, #8]
 8002bc6:	690b      	ldr	r3, [r1, #16]
 8002bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	bfb8      	it	lt
 8002bd0:	4613      	movlt	r3, r2
 8002bd2:	f8c9 3000 	str.w	r3, [r9]
 8002bd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bda:	4606      	mov	r6, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	b112      	cbz	r2, 8002be6 <_printf_common+0x2a>
 8002be0:	3301      	adds	r3, #1
 8002be2:	f8c9 3000 	str.w	r3, [r9]
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	0699      	lsls	r1, r3, #26
 8002bea:	bf42      	ittt	mi
 8002bec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002bf0:	3302      	addmi	r3, #2
 8002bf2:	f8c9 3000 	strmi.w	r3, [r9]
 8002bf6:	6825      	ldr	r5, [r4, #0]
 8002bf8:	f015 0506 	ands.w	r5, r5, #6
 8002bfc:	d107      	bne.n	8002c0e <_printf_common+0x52>
 8002bfe:	f104 0a19 	add.w	sl, r4, #25
 8002c02:	68e3      	ldr	r3, [r4, #12]
 8002c04:	f8d9 2000 	ldr.w	r2, [r9]
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	429d      	cmp	r5, r3
 8002c0c:	db29      	blt.n	8002c62 <_printf_common+0xa6>
 8002c0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	3300      	adds	r3, #0
 8002c16:	bf18      	it	ne
 8002c18:	2301      	movne	r3, #1
 8002c1a:	0692      	lsls	r2, r2, #26
 8002c1c:	d42e      	bmi.n	8002c7c <_printf_common+0xc0>
 8002c1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c22:	4639      	mov	r1, r7
 8002c24:	4630      	mov	r0, r6
 8002c26:	47c0      	blx	r8
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d021      	beq.n	8002c70 <_printf_common+0xb4>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	68e5      	ldr	r5, [r4, #12]
 8002c30:	f8d9 2000 	ldr.w	r2, [r9]
 8002c34:	f003 0306 	and.w	r3, r3, #6
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	bf08      	it	eq
 8002c3c:	1aad      	subeq	r5, r5, r2
 8002c3e:	68a3      	ldr	r3, [r4, #8]
 8002c40:	6922      	ldr	r2, [r4, #16]
 8002c42:	bf0c      	ite	eq
 8002c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c48:	2500      	movne	r5, #0
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	bfc4      	itt	gt
 8002c4e:	1a9b      	subgt	r3, r3, r2
 8002c50:	18ed      	addgt	r5, r5, r3
 8002c52:	f04f 0900 	mov.w	r9, #0
 8002c56:	341a      	adds	r4, #26
 8002c58:	454d      	cmp	r5, r9
 8002c5a:	d11b      	bne.n	8002c94 <_printf_common+0xd8>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c62:	2301      	movs	r3, #1
 8002c64:	4652      	mov	r2, sl
 8002c66:	4639      	mov	r1, r7
 8002c68:	4630      	mov	r0, r6
 8002c6a:	47c0      	blx	r8
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	d103      	bne.n	8002c78 <_printf_common+0xbc>
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c78:	3501      	adds	r5, #1
 8002c7a:	e7c2      	b.n	8002c02 <_printf_common+0x46>
 8002c7c:	18e1      	adds	r1, r4, r3
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	2030      	movs	r0, #48	; 0x30
 8002c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c86:	4422      	add	r2, r4
 8002c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c90:	3302      	adds	r3, #2
 8002c92:	e7c4      	b.n	8002c1e <_printf_common+0x62>
 8002c94:	2301      	movs	r3, #1
 8002c96:	4622      	mov	r2, r4
 8002c98:	4639      	mov	r1, r7
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	47c0      	blx	r8
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d0e6      	beq.n	8002c70 <_printf_common+0xb4>
 8002ca2:	f109 0901 	add.w	r9, r9, #1
 8002ca6:	e7d7      	b.n	8002c58 <_printf_common+0x9c>

08002ca8 <_printf_i>:
 8002ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cac:	4617      	mov	r7, r2
 8002cae:	7e0a      	ldrb	r2, [r1, #24]
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	2a6e      	cmp	r2, #110	; 0x6e
 8002cb4:	4698      	mov	r8, r3
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	460c      	mov	r4, r1
 8002cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cbc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cc0:	f000 80bc 	beq.w	8002e3c <_printf_i+0x194>
 8002cc4:	d81a      	bhi.n	8002cfc <_printf_i+0x54>
 8002cc6:	2a63      	cmp	r2, #99	; 0x63
 8002cc8:	d02e      	beq.n	8002d28 <_printf_i+0x80>
 8002cca:	d80a      	bhi.n	8002ce2 <_printf_i+0x3a>
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	f000 80c8 	beq.w	8002e62 <_printf_i+0x1ba>
 8002cd2:	2a58      	cmp	r2, #88	; 0x58
 8002cd4:	f000 808a 	beq.w	8002dec <_printf_i+0x144>
 8002cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cdc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002ce0:	e02a      	b.n	8002d38 <_printf_i+0x90>
 8002ce2:	2a64      	cmp	r2, #100	; 0x64
 8002ce4:	d001      	beq.n	8002cea <_printf_i+0x42>
 8002ce6:	2a69      	cmp	r2, #105	; 0x69
 8002ce8:	d1f6      	bne.n	8002cd8 <_printf_i+0x30>
 8002cea:	6821      	ldr	r1, [r4, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002cf2:	d023      	beq.n	8002d3c <_printf_i+0x94>
 8002cf4:	1d11      	adds	r1, r2, #4
 8002cf6:	6019      	str	r1, [r3, #0]
 8002cf8:	6813      	ldr	r3, [r2, #0]
 8002cfa:	e027      	b.n	8002d4c <_printf_i+0xa4>
 8002cfc:	2a73      	cmp	r2, #115	; 0x73
 8002cfe:	f000 80b4 	beq.w	8002e6a <_printf_i+0x1c2>
 8002d02:	d808      	bhi.n	8002d16 <_printf_i+0x6e>
 8002d04:	2a6f      	cmp	r2, #111	; 0x6f
 8002d06:	d02a      	beq.n	8002d5e <_printf_i+0xb6>
 8002d08:	2a70      	cmp	r2, #112	; 0x70
 8002d0a:	d1e5      	bne.n	8002cd8 <_printf_i+0x30>
 8002d0c:	680a      	ldr	r2, [r1, #0]
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	600a      	str	r2, [r1, #0]
 8002d14:	e003      	b.n	8002d1e <_printf_i+0x76>
 8002d16:	2a75      	cmp	r2, #117	; 0x75
 8002d18:	d021      	beq.n	8002d5e <_printf_i+0xb6>
 8002d1a:	2a78      	cmp	r2, #120	; 0x78
 8002d1c:	d1dc      	bne.n	8002cd8 <_printf_i+0x30>
 8002d1e:	2278      	movs	r2, #120	; 0x78
 8002d20:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d24:	496e      	ldr	r1, [pc, #440]	; (8002ee0 <_printf_i+0x238>)
 8002d26:	e064      	b.n	8002df2 <_printf_i+0x14a>
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d2e:	1d11      	adds	r1, r2, #4
 8002d30:	6019      	str	r1, [r3, #0]
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0a3      	b.n	8002e84 <_printf_i+0x1dc>
 8002d3c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d40:	f102 0104 	add.w	r1, r2, #4
 8002d44:	6019      	str	r1, [r3, #0]
 8002d46:	d0d7      	beq.n	8002cf8 <_printf_i+0x50>
 8002d48:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da03      	bge.n	8002d58 <_printf_i+0xb0>
 8002d50:	222d      	movs	r2, #45	; 0x2d
 8002d52:	425b      	negs	r3, r3
 8002d54:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d58:	4962      	ldr	r1, [pc, #392]	; (8002ee4 <_printf_i+0x23c>)
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	e017      	b.n	8002d8e <_printf_i+0xe6>
 8002d5e:	6820      	ldr	r0, [r4, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d66:	d003      	beq.n	8002d70 <_printf_i+0xc8>
 8002d68:	1d08      	adds	r0, r1, #4
 8002d6a:	6018      	str	r0, [r3, #0]
 8002d6c:	680b      	ldr	r3, [r1, #0]
 8002d6e:	e006      	b.n	8002d7e <_printf_i+0xd6>
 8002d70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d74:	f101 0004 	add.w	r0, r1, #4
 8002d78:	6018      	str	r0, [r3, #0]
 8002d7a:	d0f7      	beq.n	8002d6c <_printf_i+0xc4>
 8002d7c:	880b      	ldrh	r3, [r1, #0]
 8002d7e:	4959      	ldr	r1, [pc, #356]	; (8002ee4 <_printf_i+0x23c>)
 8002d80:	2a6f      	cmp	r2, #111	; 0x6f
 8002d82:	bf14      	ite	ne
 8002d84:	220a      	movne	r2, #10
 8002d86:	2208      	moveq	r2, #8
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002d8e:	6865      	ldr	r5, [r4, #4]
 8002d90:	60a5      	str	r5, [r4, #8]
 8002d92:	2d00      	cmp	r5, #0
 8002d94:	f2c0 809c 	blt.w	8002ed0 <_printf_i+0x228>
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	f020 0004 	bic.w	r0, r0, #4
 8002d9e:	6020      	str	r0, [r4, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d13f      	bne.n	8002e24 <_printf_i+0x17c>
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	f040 8095 	bne.w	8002ed4 <_printf_i+0x22c>
 8002daa:	4675      	mov	r5, lr
 8002dac:	2a08      	cmp	r2, #8
 8002dae:	d10b      	bne.n	8002dc8 <_printf_i+0x120>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	07da      	lsls	r2, r3, #31
 8002db4:	d508      	bpl.n	8002dc8 <_printf_i+0x120>
 8002db6:	6923      	ldr	r3, [r4, #16]
 8002db8:	6862      	ldr	r2, [r4, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bfde      	ittt	le
 8002dbe:	2330      	movle	r3, #48	; 0x30
 8002dc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dc8:	ebae 0305 	sub.w	r3, lr, r5
 8002dcc:	6123      	str	r3, [r4, #16]
 8002dce:	f8cd 8000 	str.w	r8, [sp]
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	aa03      	add	r2, sp, #12
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f7ff feef 	bl	8002bbc <_printf_common>
 8002dde:	3001      	adds	r0, #1
 8002de0:	d155      	bne.n	8002e8e <_printf_i+0x1e6>
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	b005      	add	sp, #20
 8002de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002df0:	493c      	ldr	r1, [pc, #240]	; (8002ee4 <_printf_i+0x23c>)
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dfa:	f100 0504 	add.w	r5, r0, #4
 8002dfe:	601d      	str	r5, [r3, #0]
 8002e00:	d001      	beq.n	8002e06 <_printf_i+0x15e>
 8002e02:	6803      	ldr	r3, [r0, #0]
 8002e04:	e002      	b.n	8002e0c <_printf_i+0x164>
 8002e06:	0655      	lsls	r5, r2, #25
 8002e08:	d5fb      	bpl.n	8002e02 <_printf_i+0x15a>
 8002e0a:	8803      	ldrh	r3, [r0, #0]
 8002e0c:	07d0      	lsls	r0, r2, #31
 8002e0e:	bf44      	itt	mi
 8002e10:	f042 0220 	orrmi.w	r2, r2, #32
 8002e14:	6022      	strmi	r2, [r4, #0]
 8002e16:	b91b      	cbnz	r3, 8002e20 <_printf_i+0x178>
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	f022 0220 	bic.w	r2, r2, #32
 8002e1e:	6022      	str	r2, [r4, #0]
 8002e20:	2210      	movs	r2, #16
 8002e22:	e7b1      	b.n	8002d88 <_printf_i+0xe0>
 8002e24:	4675      	mov	r5, lr
 8002e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e2a:	fb02 3310 	mls	r3, r2, r0, r3
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e34:	4603      	mov	r3, r0
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d1f5      	bne.n	8002e26 <_printf_i+0x17e>
 8002e3a:	e7b7      	b.n	8002dac <_printf_i+0x104>
 8002e3c:	6808      	ldr	r0, [r1, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	6949      	ldr	r1, [r1, #20]
 8002e42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e46:	d004      	beq.n	8002e52 <_printf_i+0x1aa>
 8002e48:	1d10      	adds	r0, r2, #4
 8002e4a:	6018      	str	r0, [r3, #0]
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	6019      	str	r1, [r3, #0]
 8002e50:	e007      	b.n	8002e62 <_printf_i+0x1ba>
 8002e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e56:	f102 0004 	add.w	r0, r2, #4
 8002e5a:	6018      	str	r0, [r3, #0]
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	d0f6      	beq.n	8002e4e <_printf_i+0x1a6>
 8002e60:	8019      	strh	r1, [r3, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	6123      	str	r3, [r4, #16]
 8002e66:	4675      	mov	r5, lr
 8002e68:	e7b1      	b.n	8002dce <_printf_i+0x126>
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	1d11      	adds	r1, r2, #4
 8002e6e:	6019      	str	r1, [r3, #0]
 8002e70:	6815      	ldr	r5, [r2, #0]
 8002e72:	6862      	ldr	r2, [r4, #4]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4628      	mov	r0, r5
 8002e78:	f7fd f9ba 	bl	80001f0 <memchr>
 8002e7c:	b108      	cbz	r0, 8002e82 <_printf_i+0x1da>
 8002e7e:	1b40      	subs	r0, r0, r5
 8002e80:	6060      	str	r0, [r4, #4]
 8002e82:	6863      	ldr	r3, [r4, #4]
 8002e84:	6123      	str	r3, [r4, #16]
 8002e86:	2300      	movs	r3, #0
 8002e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e8c:	e79f      	b.n	8002dce <_printf_i+0x126>
 8002e8e:	6923      	ldr	r3, [r4, #16]
 8002e90:	462a      	mov	r2, r5
 8002e92:	4639      	mov	r1, r7
 8002e94:	4630      	mov	r0, r6
 8002e96:	47c0      	blx	r8
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d0a2      	beq.n	8002de2 <_printf_i+0x13a>
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	079b      	lsls	r3, r3, #30
 8002ea0:	d507      	bpl.n	8002eb2 <_printf_i+0x20a>
 8002ea2:	2500      	movs	r5, #0
 8002ea4:	f104 0919 	add.w	r9, r4, #25
 8002ea8:	68e3      	ldr	r3, [r4, #12]
 8002eaa:	9a03      	ldr	r2, [sp, #12]
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	429d      	cmp	r5, r3
 8002eb0:	db05      	blt.n	8002ebe <_printf_i+0x216>
 8002eb2:	68e0      	ldr	r0, [r4, #12]
 8002eb4:	9b03      	ldr	r3, [sp, #12]
 8002eb6:	4298      	cmp	r0, r3
 8002eb8:	bfb8      	it	lt
 8002eba:	4618      	movlt	r0, r3
 8002ebc:	e793      	b.n	8002de6 <_printf_i+0x13e>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	464a      	mov	r2, r9
 8002ec2:	4639      	mov	r1, r7
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d08a      	beq.n	8002de2 <_printf_i+0x13a>
 8002ecc:	3501      	adds	r5, #1
 8002ece:	e7eb      	b.n	8002ea8 <_printf_i+0x200>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1a7      	bne.n	8002e24 <_printf_i+0x17c>
 8002ed4:	780b      	ldrb	r3, [r1, #0]
 8002ed6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ede:	e765      	b.n	8002dac <_printf_i+0x104>
 8002ee0:	080034fe 	.word	0x080034fe
 8002ee4:	080034ed 	.word	0x080034ed

08002ee8 <_sbrk_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4c06      	ldr	r4, [pc, #24]	; (8002f04 <_sbrk_r+0x1c>)
 8002eec:	2300      	movs	r3, #0
 8002eee:	4605      	mov	r5, r0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	f7ff fa30 	bl	8002358 <_sbrk>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d102      	bne.n	8002f02 <_sbrk_r+0x1a>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	b103      	cbz	r3, 8002f02 <_sbrk_r+0x1a>
 8002f00:	602b      	str	r3, [r5, #0]
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	200000dc 	.word	0x200000dc

08002f08 <__sread>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f10:	f000 fa4a 	bl	80033a8 <_read_r>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	bfab      	itete	ge
 8002f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f1c:	181b      	addge	r3, r3, r0
 8002f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f22:	bfac      	ite	ge
 8002f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f26:	81a3      	strhlt	r3, [r4, #12]
 8002f28:	bd10      	pop	{r4, pc}

08002f2a <__swrite>:
 8002f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2e:	461f      	mov	r7, r3
 8002f30:	898b      	ldrh	r3, [r1, #12]
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	4605      	mov	r5, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	4616      	mov	r6, r2
 8002f3a:	d505      	bpl.n	8002f48 <__swrite+0x1e>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f44:	f000 f9b8 	bl	80032b8 <_lseek_r>
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f52:	81a3      	strh	r3, [r4, #12]
 8002f54:	4632      	mov	r2, r6
 8002f56:	463b      	mov	r3, r7
 8002f58:	4628      	mov	r0, r5
 8002f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5e:	f000 b869 	b.w	8003034 <_write_r>

08002f62 <__sseek>:
 8002f62:	b510      	push	{r4, lr}
 8002f64:	460c      	mov	r4, r1
 8002f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6a:	f000 f9a5 	bl	80032b8 <_lseek_r>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	bf15      	itete	ne
 8002f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f7e:	81a3      	strheq	r3, [r4, #12]
 8002f80:	bf18      	it	ne
 8002f82:	81a3      	strhne	r3, [r4, #12]
 8002f84:	bd10      	pop	{r4, pc}

08002f86 <__sclose>:
 8002f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8a:	f000 b8d3 	b.w	8003134 <_close_r>
	...

08002f90 <__swbuf_r>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	460e      	mov	r6, r1
 8002f94:	4614      	mov	r4, r2
 8002f96:	4605      	mov	r5, r0
 8002f98:	b118      	cbz	r0, 8002fa2 <__swbuf_r+0x12>
 8002f9a:	6983      	ldr	r3, [r0, #24]
 8002f9c:	b90b      	cbnz	r3, 8002fa2 <__swbuf_r+0x12>
 8002f9e:	f7ff fb8f 	bl	80026c0 <__sinit>
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <__swbuf_r+0x98>)
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	d12a      	bne.n	8002ffe <__swbuf_r+0x6e>
 8002fa8:	686c      	ldr	r4, [r5, #4]
 8002faa:	69a3      	ldr	r3, [r4, #24]
 8002fac:	60a3      	str	r3, [r4, #8]
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	071a      	lsls	r2, r3, #28
 8002fb2:	d52e      	bpl.n	8003012 <__swbuf_r+0x82>
 8002fb4:	6923      	ldr	r3, [r4, #16]
 8002fb6:	b363      	cbz	r3, 8003012 <__swbuf_r+0x82>
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	1ac0      	subs	r0, r0, r3
 8002fbe:	6963      	ldr	r3, [r4, #20]
 8002fc0:	b2f6      	uxtb	r6, r6
 8002fc2:	4298      	cmp	r0, r3
 8002fc4:	4637      	mov	r7, r6
 8002fc6:	db04      	blt.n	8002fd2 <__swbuf_r+0x42>
 8002fc8:	4621      	mov	r1, r4
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f000 f94a 	bl	8003264 <_fflush_r>
 8002fd0:	bb28      	cbnz	r0, 800301e <__swbuf_r+0x8e>
 8002fd2:	68a3      	ldr	r3, [r4, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60a3      	str	r3, [r4, #8]
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	6022      	str	r2, [r4, #0]
 8002fde:	701e      	strb	r6, [r3, #0]
 8002fe0:	6963      	ldr	r3, [r4, #20]
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	4298      	cmp	r0, r3
 8002fe6:	d004      	beq.n	8002ff2 <__swbuf_r+0x62>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	07db      	lsls	r3, r3, #31
 8002fec:	d519      	bpl.n	8003022 <__swbuf_r+0x92>
 8002fee:	2e0a      	cmp	r6, #10
 8002ff0:	d117      	bne.n	8003022 <__swbuf_r+0x92>
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f000 f935 	bl	8003264 <_fflush_r>
 8002ffa:	b190      	cbz	r0, 8003022 <__swbuf_r+0x92>
 8002ffc:	e00f      	b.n	800301e <__swbuf_r+0x8e>
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <__swbuf_r+0x9c>)
 8003000:	429c      	cmp	r4, r3
 8003002:	d101      	bne.n	8003008 <__swbuf_r+0x78>
 8003004:	68ac      	ldr	r4, [r5, #8]
 8003006:	e7d0      	b.n	8002faa <__swbuf_r+0x1a>
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <__swbuf_r+0xa0>)
 800300a:	429c      	cmp	r4, r3
 800300c:	bf08      	it	eq
 800300e:	68ec      	ldreq	r4, [r5, #12]
 8003010:	e7cb      	b.n	8002faa <__swbuf_r+0x1a>
 8003012:	4621      	mov	r1, r4
 8003014:	4628      	mov	r0, r5
 8003016:	f000 f81f 	bl	8003058 <__swsetup_r>
 800301a:	2800      	cmp	r0, #0
 800301c:	d0cc      	beq.n	8002fb8 <__swbuf_r+0x28>
 800301e:	f04f 37ff 	mov.w	r7, #4294967295
 8003022:	4638      	mov	r0, r7
 8003024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003026:	bf00      	nop
 8003028:	08003498 	.word	0x08003498
 800302c:	080034b8 	.word	0x080034b8
 8003030:	08003478 	.word	0x08003478

08003034 <_write_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4c07      	ldr	r4, [pc, #28]	; (8003054 <_write_r+0x20>)
 8003038:	4605      	mov	r5, r0
 800303a:	4608      	mov	r0, r1
 800303c:	4611      	mov	r1, r2
 800303e:	2200      	movs	r2, #0
 8003040:	6022      	str	r2, [r4, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f7ff f96c 	bl	8002320 <_write>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_write_r+0x1e>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	b103      	cbz	r3, 8003052 <_write_r+0x1e>
 8003050:	602b      	str	r3, [r5, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	200000dc 	.word	0x200000dc

08003058 <__swsetup_r>:
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <__swsetup_r+0xcc>)
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	681d      	ldr	r5, [r3, #0]
 800305e:	4606      	mov	r6, r0
 8003060:	460c      	mov	r4, r1
 8003062:	b125      	cbz	r5, 800306e <__swsetup_r+0x16>
 8003064:	69ab      	ldr	r3, [r5, #24]
 8003066:	b913      	cbnz	r3, 800306e <__swsetup_r+0x16>
 8003068:	4628      	mov	r0, r5
 800306a:	f7ff fb29 	bl	80026c0 <__sinit>
 800306e:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <__swsetup_r+0xd0>)
 8003070:	429c      	cmp	r4, r3
 8003072:	d10f      	bne.n	8003094 <__swsetup_r+0x3c>
 8003074:	686c      	ldr	r4, [r5, #4]
 8003076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800307a:	b29a      	uxth	r2, r3
 800307c:	0715      	lsls	r5, r2, #28
 800307e:	d42c      	bmi.n	80030da <__swsetup_r+0x82>
 8003080:	06d0      	lsls	r0, r2, #27
 8003082:	d411      	bmi.n	80030a8 <__swsetup_r+0x50>
 8003084:	2209      	movs	r2, #9
 8003086:	6032      	str	r2, [r6, #0]
 8003088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	f04f 30ff 	mov.w	r0, #4294967295
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <__swsetup_r+0xd4>)
 8003096:	429c      	cmp	r4, r3
 8003098:	d101      	bne.n	800309e <__swsetup_r+0x46>
 800309a:	68ac      	ldr	r4, [r5, #8]
 800309c:	e7eb      	b.n	8003076 <__swsetup_r+0x1e>
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <__swsetup_r+0xd8>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	bf08      	it	eq
 80030a4:	68ec      	ldreq	r4, [r5, #12]
 80030a6:	e7e6      	b.n	8003076 <__swsetup_r+0x1e>
 80030a8:	0751      	lsls	r1, r2, #29
 80030aa:	d512      	bpl.n	80030d2 <__swsetup_r+0x7a>
 80030ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ae:	b141      	cbz	r1, 80030c2 <__swsetup_r+0x6a>
 80030b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030b4:	4299      	cmp	r1, r3
 80030b6:	d002      	beq.n	80030be <__swsetup_r+0x66>
 80030b8:	4630      	mov	r0, r6
 80030ba:	f7ff fb93 	bl	80027e4 <_free_r>
 80030be:	2300      	movs	r3, #0
 80030c0:	6363      	str	r3, [r4, #52]	; 0x34
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030c8:	81a3      	strh	r3, [r4, #12]
 80030ca:	2300      	movs	r3, #0
 80030cc:	6063      	str	r3, [r4, #4]
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	6923      	ldr	r3, [r4, #16]
 80030dc:	b94b      	cbnz	r3, 80030f2 <__swsetup_r+0x9a>
 80030de:	89a3      	ldrh	r3, [r4, #12]
 80030e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d003      	beq.n	80030f2 <__swsetup_r+0x9a>
 80030ea:	4621      	mov	r1, r4
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 f919 	bl	8003324 <__smakebuf_r>
 80030f2:	89a2      	ldrh	r2, [r4, #12]
 80030f4:	f012 0301 	ands.w	r3, r2, #1
 80030f8:	d00c      	beq.n	8003114 <__swsetup_r+0xbc>
 80030fa:	2300      	movs	r3, #0
 80030fc:	60a3      	str	r3, [r4, #8]
 80030fe:	6963      	ldr	r3, [r4, #20]
 8003100:	425b      	negs	r3, r3
 8003102:	61a3      	str	r3, [r4, #24]
 8003104:	6923      	ldr	r3, [r4, #16]
 8003106:	b953      	cbnz	r3, 800311e <__swsetup_r+0xc6>
 8003108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800310c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003110:	d1ba      	bne.n	8003088 <__swsetup_r+0x30>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	0792      	lsls	r2, r2, #30
 8003116:	bf58      	it	pl
 8003118:	6963      	ldrpl	r3, [r4, #20]
 800311a:	60a3      	str	r3, [r4, #8]
 800311c:	e7f2      	b.n	8003104 <__swsetup_r+0xac>
 800311e:	2000      	movs	r0, #0
 8003120:	e7f7      	b.n	8003112 <__swsetup_r+0xba>
 8003122:	bf00      	nop
 8003124:	2000000c 	.word	0x2000000c
 8003128:	08003498 	.word	0x08003498
 800312c:	080034b8 	.word	0x080034b8
 8003130:	08003478 	.word	0x08003478

08003134 <_close_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4c06      	ldr	r4, [pc, #24]	; (8003150 <_close_r+0x1c>)
 8003138:	2300      	movs	r3, #0
 800313a:	4605      	mov	r5, r0
 800313c:	4608      	mov	r0, r1
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	f7ff f938 	bl	80023b4 <_close>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_close_r+0x1a>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	b103      	cbz	r3, 800314e <_close_r+0x1a>
 800314c:	602b      	str	r3, [r5, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	200000dc 	.word	0x200000dc

08003154 <__sflush_r>:
 8003154:	898a      	ldrh	r2, [r1, #12]
 8003156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315a:	4605      	mov	r5, r0
 800315c:	0710      	lsls	r0, r2, #28
 800315e:	460c      	mov	r4, r1
 8003160:	d45a      	bmi.n	8003218 <__sflush_r+0xc4>
 8003162:	684b      	ldr	r3, [r1, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	dc05      	bgt.n	8003174 <__sflush_r+0x20>
 8003168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	dc02      	bgt.n	8003174 <__sflush_r+0x20>
 800316e:	2000      	movs	r0, #0
 8003170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003176:	2e00      	cmp	r6, #0
 8003178:	d0f9      	beq.n	800316e <__sflush_r+0x1a>
 800317a:	2300      	movs	r3, #0
 800317c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003180:	682f      	ldr	r7, [r5, #0]
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	d033      	beq.n	80031ee <__sflush_r+0x9a>
 8003186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	075a      	lsls	r2, r3, #29
 800318c:	d505      	bpl.n	800319a <__sflush_r+0x46>
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	1ac0      	subs	r0, r0, r3
 8003192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003194:	b10b      	cbz	r3, 800319a <__sflush_r+0x46>
 8003196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003198:	1ac0      	subs	r0, r0, r3
 800319a:	2300      	movs	r3, #0
 800319c:	4602      	mov	r2, r0
 800319e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a0:	6a21      	ldr	r1, [r4, #32]
 80031a2:	4628      	mov	r0, r5
 80031a4:	47b0      	blx	r6
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	d106      	bne.n	80031ba <__sflush_r+0x66>
 80031ac:	6829      	ldr	r1, [r5, #0]
 80031ae:	291d      	cmp	r1, #29
 80031b0:	d84b      	bhi.n	800324a <__sflush_r+0xf6>
 80031b2:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <__sflush_r+0x10c>)
 80031b4:	40ca      	lsrs	r2, r1
 80031b6:	07d6      	lsls	r6, r2, #31
 80031b8:	d547      	bpl.n	800324a <__sflush_r+0xf6>
 80031ba:	2200      	movs	r2, #0
 80031bc:	6062      	str	r2, [r4, #4]
 80031be:	04d9      	lsls	r1, r3, #19
 80031c0:	6922      	ldr	r2, [r4, #16]
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	d504      	bpl.n	80031d0 <__sflush_r+0x7c>
 80031c6:	1c42      	adds	r2, r0, #1
 80031c8:	d101      	bne.n	80031ce <__sflush_r+0x7a>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	b903      	cbnz	r3, 80031d0 <__sflush_r+0x7c>
 80031ce:	6560      	str	r0, [r4, #84]	; 0x54
 80031d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d2:	602f      	str	r7, [r5, #0]
 80031d4:	2900      	cmp	r1, #0
 80031d6:	d0ca      	beq.n	800316e <__sflush_r+0x1a>
 80031d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031dc:	4299      	cmp	r1, r3
 80031de:	d002      	beq.n	80031e6 <__sflush_r+0x92>
 80031e0:	4628      	mov	r0, r5
 80031e2:	f7ff faff 	bl	80027e4 <_free_r>
 80031e6:	2000      	movs	r0, #0
 80031e8:	6360      	str	r0, [r4, #52]	; 0x34
 80031ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	2301      	movs	r3, #1
 80031f2:	4628      	mov	r0, r5
 80031f4:	47b0      	blx	r6
 80031f6:	1c41      	adds	r1, r0, #1
 80031f8:	d1c6      	bne.n	8003188 <__sflush_r+0x34>
 80031fa:	682b      	ldr	r3, [r5, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0c3      	beq.n	8003188 <__sflush_r+0x34>
 8003200:	2b1d      	cmp	r3, #29
 8003202:	d001      	beq.n	8003208 <__sflush_r+0xb4>
 8003204:	2b16      	cmp	r3, #22
 8003206:	d101      	bne.n	800320c <__sflush_r+0xb8>
 8003208:	602f      	str	r7, [r5, #0]
 800320a:	e7b0      	b.n	800316e <__sflush_r+0x1a>
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003212:	81a3      	strh	r3, [r4, #12]
 8003214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003218:	690f      	ldr	r7, [r1, #16]
 800321a:	2f00      	cmp	r7, #0
 800321c:	d0a7      	beq.n	800316e <__sflush_r+0x1a>
 800321e:	0793      	lsls	r3, r2, #30
 8003220:	680e      	ldr	r6, [r1, #0]
 8003222:	bf08      	it	eq
 8003224:	694b      	ldreq	r3, [r1, #20]
 8003226:	600f      	str	r7, [r1, #0]
 8003228:	bf18      	it	ne
 800322a:	2300      	movne	r3, #0
 800322c:	eba6 0807 	sub.w	r8, r6, r7
 8003230:	608b      	str	r3, [r1, #8]
 8003232:	f1b8 0f00 	cmp.w	r8, #0
 8003236:	dd9a      	ble.n	800316e <__sflush_r+0x1a>
 8003238:	4643      	mov	r3, r8
 800323a:	463a      	mov	r2, r7
 800323c:	6a21      	ldr	r1, [r4, #32]
 800323e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003240:	4628      	mov	r0, r5
 8003242:	47b0      	blx	r6
 8003244:	2800      	cmp	r0, #0
 8003246:	dc07      	bgt.n	8003258 <__sflush_r+0x104>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003258:	4407      	add	r7, r0
 800325a:	eba8 0800 	sub.w	r8, r8, r0
 800325e:	e7e8      	b.n	8003232 <__sflush_r+0xde>
 8003260:	20400001 	.word	0x20400001

08003264 <_fflush_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	4605      	mov	r5, r0
 800326a:	460c      	mov	r4, r1
 800326c:	b1db      	cbz	r3, 80032a6 <_fflush_r+0x42>
 800326e:	b118      	cbz	r0, 8003278 <_fflush_r+0x14>
 8003270:	6983      	ldr	r3, [r0, #24]
 8003272:	b90b      	cbnz	r3, 8003278 <_fflush_r+0x14>
 8003274:	f7ff fa24 	bl	80026c0 <__sinit>
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <_fflush_r+0x48>)
 800327a:	429c      	cmp	r4, r3
 800327c:	d109      	bne.n	8003292 <_fflush_r+0x2e>
 800327e:	686c      	ldr	r4, [r5, #4]
 8003280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003284:	b17b      	cbz	r3, 80032a6 <_fflush_r+0x42>
 8003286:	4621      	mov	r1, r4
 8003288:	4628      	mov	r0, r5
 800328a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800328e:	f7ff bf61 	b.w	8003154 <__sflush_r>
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <_fflush_r+0x4c>)
 8003294:	429c      	cmp	r4, r3
 8003296:	d101      	bne.n	800329c <_fflush_r+0x38>
 8003298:	68ac      	ldr	r4, [r5, #8]
 800329a:	e7f1      	b.n	8003280 <_fflush_r+0x1c>
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <_fflush_r+0x50>)
 800329e:	429c      	cmp	r4, r3
 80032a0:	bf08      	it	eq
 80032a2:	68ec      	ldreq	r4, [r5, #12]
 80032a4:	e7ec      	b.n	8003280 <_fflush_r+0x1c>
 80032a6:	2000      	movs	r0, #0
 80032a8:	bd38      	pop	{r3, r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	08003498 	.word	0x08003498
 80032b0:	080034b8 	.word	0x080034b8
 80032b4:	08003478 	.word	0x08003478

080032b8 <_lseek_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4c07      	ldr	r4, [pc, #28]	; (80032d8 <_lseek_r+0x20>)
 80032bc:	4605      	mov	r5, r0
 80032be:	4608      	mov	r0, r1
 80032c0:	4611      	mov	r1, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	6022      	str	r2, [r4, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f7ff f89b 	bl	8002402 <_lseek>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_lseek_r+0x1e>
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_lseek_r+0x1e>
 80032d4:	602b      	str	r3, [r5, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	200000dc 	.word	0x200000dc

080032dc <__swhatbuf_r>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	460e      	mov	r6, r1
 80032e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e4:	2900      	cmp	r1, #0
 80032e6:	b090      	sub	sp, #64	; 0x40
 80032e8:	4614      	mov	r4, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	da07      	bge.n	80032fe <__swhatbuf_r+0x22>
 80032ee:	2300      	movs	r3, #0
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	89b3      	ldrh	r3, [r6, #12]
 80032f4:	061a      	lsls	r2, r3, #24
 80032f6:	d410      	bmi.n	800331a <__swhatbuf_r+0x3e>
 80032f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fc:	e00e      	b.n	800331c <__swhatbuf_r+0x40>
 80032fe:	aa01      	add	r2, sp, #4
 8003300:	f000 f864 	bl	80033cc <_fstat_r>
 8003304:	2800      	cmp	r0, #0
 8003306:	dbf2      	blt.n	80032ee <__swhatbuf_r+0x12>
 8003308:	9a02      	ldr	r2, [sp, #8]
 800330a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800330e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003312:	425a      	negs	r2, r3
 8003314:	415a      	adcs	r2, r3
 8003316:	602a      	str	r2, [r5, #0]
 8003318:	e7ee      	b.n	80032f8 <__swhatbuf_r+0x1c>
 800331a:	2340      	movs	r3, #64	; 0x40
 800331c:	2000      	movs	r0, #0
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	b010      	add	sp, #64	; 0x40
 8003322:	bd70      	pop	{r4, r5, r6, pc}

08003324 <__smakebuf_r>:
 8003324:	898b      	ldrh	r3, [r1, #12]
 8003326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003328:	079d      	lsls	r5, r3, #30
 800332a:	4606      	mov	r6, r0
 800332c:	460c      	mov	r4, r1
 800332e:	d507      	bpl.n	8003340 <__smakebuf_r+0x1c>
 8003330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	6123      	str	r3, [r4, #16]
 8003338:	2301      	movs	r3, #1
 800333a:	6163      	str	r3, [r4, #20]
 800333c:	b002      	add	sp, #8
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	ab01      	add	r3, sp, #4
 8003342:	466a      	mov	r2, sp
 8003344:	f7ff ffca 	bl	80032dc <__swhatbuf_r>
 8003348:	9900      	ldr	r1, [sp, #0]
 800334a:	4605      	mov	r5, r0
 800334c:	4630      	mov	r0, r6
 800334e:	f7ff fa97 	bl	8002880 <_malloc_r>
 8003352:	b948      	cbnz	r0, 8003368 <__smakebuf_r+0x44>
 8003354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003358:	059a      	lsls	r2, r3, #22
 800335a:	d4ef      	bmi.n	800333c <__smakebuf_r+0x18>
 800335c:	f023 0303 	bic.w	r3, r3, #3
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	e7e3      	b.n	8003330 <__smakebuf_r+0xc>
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <__smakebuf_r+0x7c>)
 800336a:	62b3      	str	r3, [r6, #40]	; 0x28
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	6020      	str	r0, [r4, #0]
 8003370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003374:	81a3      	strh	r3, [r4, #12]
 8003376:	9b00      	ldr	r3, [sp, #0]
 8003378:	6163      	str	r3, [r4, #20]
 800337a:	9b01      	ldr	r3, [sp, #4]
 800337c:	6120      	str	r0, [r4, #16]
 800337e:	b15b      	cbz	r3, 8003398 <__smakebuf_r+0x74>
 8003380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003384:	4630      	mov	r0, r6
 8003386:	f000 f833 	bl	80033f0 <_isatty_r>
 800338a:	b128      	cbz	r0, 8003398 <__smakebuf_r+0x74>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	81a3      	strh	r3, [r4, #12]
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	431d      	orrs	r5, r3
 800339c:	81a5      	strh	r5, [r4, #12]
 800339e:	e7cd      	b.n	800333c <__smakebuf_r+0x18>
 80033a0:	08002641 	.word	0x08002641

080033a4 <__malloc_lock>:
 80033a4:	4770      	bx	lr

080033a6 <__malloc_unlock>:
 80033a6:	4770      	bx	lr

080033a8 <_read_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4c07      	ldr	r4, [pc, #28]	; (80033c8 <_read_r+0x20>)
 80033ac:	4605      	mov	r5, r0
 80033ae:	4608      	mov	r0, r1
 80033b0:	4611      	mov	r1, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	6022      	str	r2, [r4, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7ff f830 	bl	800241c <_read>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d102      	bne.n	80033c6 <_read_r+0x1e>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	b103      	cbz	r3, 80033c6 <_read_r+0x1e>
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	200000dc 	.word	0x200000dc

080033cc <_fstat_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4c07      	ldr	r4, [pc, #28]	; (80033ec <_fstat_r+0x20>)
 80033d0:	2300      	movs	r3, #0
 80033d2:	4605      	mov	r5, r0
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	f7fe fff7 	bl	80023cc <_fstat>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d102      	bne.n	80033e8 <_fstat_r+0x1c>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	b103      	cbz	r3, 80033e8 <_fstat_r+0x1c>
 80033e6:	602b      	str	r3, [r5, #0]
 80033e8:	bd38      	pop	{r3, r4, r5, pc}
 80033ea:	bf00      	nop
 80033ec:	200000dc 	.word	0x200000dc

080033f0 <_isatty_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4c06      	ldr	r4, [pc, #24]	; (800340c <_isatty_r+0x1c>)
 80033f4:	2300      	movs	r3, #0
 80033f6:	4605      	mov	r5, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	f7fe fff6 	bl	80023ec <_isatty>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_isatty_r+0x1a>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	b103      	cbz	r3, 800340a <_isatty_r+0x1a>
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	200000dc 	.word	0x200000dc

08003410 <_init>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	bf00      	nop
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr

0800341c <_fini>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr
